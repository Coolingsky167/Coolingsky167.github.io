<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA collection</title>
    <url>/2021/03/19/JAVA-collection/</url>
    <content><![CDATA[<h1 id="1-整体架构"><a href="#1-整体架构" class="headerlink" title="1. 整体架构"></a>1. 整体架构</h1><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151412198.png" alt="image-20210324151412198"></p>
<h1 id="2-Set"><a href="#2-Set" class="headerlink" title="2. Set"></a>2. Set</h1><p>Set继承于Collection接口，是一个不允许出现重复元素，并且无序的集合，主要有HashSet和TreeSet两大实现类。</p>
<h2 id="2-1-HashSet"><a href="#2-1-HashSet" class="headerlink" title="2.1 HashSet"></a>2.1 HashSet</h2><ul>
<li>不允许出现重复因素；<ul>
<li>在向HashMap中添加元素时，先判断key的hashCode值是否相同，如果相同，则调用equals()、==进行判断，若相同则覆盖原有元素；如果不同，则直接向Map中添加元素；</li>
</ul>
</li>
<li>允许插入Null值；</li>
<li>元素无序（添加顺序和遍历顺序不一致）；</li>
<li>线程不安全，若2个线程同时操作HashSet，必须通过代码实现同步；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合：</span></span><br><span class="line">        Set&lt;String&gt; hashSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet初始容量大小：&quot;</span>+hashSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素添加：</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;my&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;is&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet容量大小：&quot;</span>+hashSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器遍历：</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = hashSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            String str = iterator.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增强for循环</span></span><br><span class="line">        <span class="keyword">for</span>(String str:hashSet)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Coolingsky&quot;</span>.equals(str))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;get Coolingsky:&quot;</span>+str);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素删除：</span></span><br><span class="line">        hashSet.remove(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet元素大小：&quot;</span> + hashSet.size());</span><br><span class="line">        hashSet.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet元素大小：&quot;</span> + hashSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合判断：</span></span><br><span class="line">        <span class="keyword">boolean</span> isEmpty = hashSet.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet是否为空：&quot;</span> + isEmpty);</span><br><span class="line">        <span class="keyword">boolean</span> isContains = hashSet.contains(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet是否包含&#x27;hello&#x27;：&quot;</span> + isContains);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-2-TreeSet"><a href="#2-2-TreeSet" class="headerlink" title="2.2 TreeSet"></a>2.2 TreeSet</h2><ul>
<li>对插入的元素进行排序，是一个有序的集合（主要与HashSet的区别）;</li>
<li>底层使用红黑树结构，而不是哈希表结构；</li>
<li>允许插入Null值；</li>
<li>不允许插入重复元素；</li>
<li>线程不安全；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">treeset</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet初始化容量大小：&quot;</span>+treeSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素添加：</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;my&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet容量大小：&quot;</span> + treeSet.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet元素顺序为：&quot;</span> + treeSet.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加for循环遍历：</span></span><br><span class="line">        <span class="keyword">for</span>(String str:treeSet)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;遍历元素：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器遍历：升序</span></span><br><span class="line">        Iterator&lt;String&gt; iteratorAesc = treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iteratorAesc.hasNext())&#123;</span><br><span class="line">            String str = iteratorAesc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;遍历元素升序：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器遍历：降序</span></span><br><span class="line">        Iterator&lt;String&gt; iteratorDesc = treeSet.descendingIterator();</span><br><span class="line">        <span class="keyword">while</span>(iteratorDesc.hasNext())&#123;</span><br><span class="line">            String str = iteratorDesc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;遍历元素降序：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素获取:实现NavigableSet接口</span></span><br><span class="line">        String firstEle = treeSet.first();<span class="comment">//获取TreeSet头节点：</span></span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet头节点为：&quot;</span> + firstEle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定元素之前的所有元素集合：(不包含指定元素)</span></span><br><span class="line">        SortedSet&lt;String&gt; headSet = treeSet.headSet(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Coolingsky节点之前的元素为：&quot;</span>+headSet.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取给定元素之间的集合：（包含头，不包含尾）</span></span><br><span class="line">        SortedSet subSet = treeSet.subSet(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1--world之间节点元素为：&quot;</span>+subSet.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合判断：</span></span><br><span class="line">        <span class="keyword">boolean</span> isEmpty = treeSet.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet是否为空：&quot;</span>+isEmpty);</span><br><span class="line">        <span class="keyword">boolean</span> isContain = treeSet.contains(<span class="string">&quot;who&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet是否包含who元素：&quot;</span>+isContain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素删除：</span></span><br><span class="line">        <span class="keyword">boolean</span> CoolingskyRemove = treeSet.remove(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Coolingsky元素是否被删除 &quot;</span>+CoolingskyRemove);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合中不存在的元素，删除返回false</span></span><br><span class="line">        <span class="keyword">boolean</span> whoRemove = treeSet.remove(<span class="string">&quot;who&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;who元素是否被删除 &quot;</span>+whoRemove);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除并返回第一个元素：如果set集合不存在元素，则返回null</span></span><br><span class="line">        String pollFirst = treeSet.pollFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除的第一个元素：&quot;</span>+pollFirst);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除并返回最后一个元素：如果set集合不存在元素，则返回null</span></span><br><span class="line">        String pollLast = treeSet.pollLast();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除的最后一个元素：&quot;</span>+pollLast);</span><br><span class="line"></span><br><span class="line">        treeSet.clear();<span class="comment">//清空集合:</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>//To be continued..</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins配置</title>
    <url>/2021/03/16/Jenkins%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>官方文档路径：<a href="https://www.jenkins.io/zh/doc/book/installing/">https://www.jenkins.io/zh/doc/book/installing/</a></p>
<h2 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1. 实验目的"></a>1. 实验目的</h2><p>本次试验将采用一个简单的maven项目，通过在docker上拉取Jenkins镜像，并且在docker中配置Tomcat，自动拉取Gitlab的代码，实现持续集成。</p>
<a id="more"></a>

<h2 id="2-什么是CI"><a href="#2-什么是CI" class="headerlink" title="2. 什么是CI"></a>2. 什么是CI</h2><p>持续集成(Continuous integration)是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>
<h2 id="3-操作流程"><a href="#3-操作流程" class="headerlink" title="3. 操作流程"></a>3. 操作流程</h2><h3 id="3-1-安装docker"><a href="#3-1-安装docker" class="headerlink" title="3.1 安装docker"></a>3.1 安装docker</h3><p>本人使用的是腾讯云服务器，操作系统是ubuntu18.04.4 LTS</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install docker </span><br></pre></td></tr></table></figure>

<p>ps. 具体怎么安装有点忘了 不行自己搜索”ubuntu docker安装”</p>
<h3 id="3-2-拉取Jenkins镜像"><a href="#3-2-拉取Jenkins镜像" class="headerlink" title="3.2 拉取Jenkins镜像"></a>3.2 拉取Jenkins镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:8080 jenkinsci/blueocean</span><br></pre></td></tr></table></figure>

<p>此时系统中应该已经有jenkins的镜像，为了给后面Tomcat也留个端口，可以添加一些端口以便使用.</p>
<p>把下面这个加到上面的指令中，因为水平有限，一旦容器创建就不会再添加端口映射了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p 8088:8088</span><br></pre></td></tr></table></figure>

<p>查看系统中已经有的镜像&amp;存在的容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151451460.png" alt="image-20210324151451460"></p>
<p>如果想要为Jenkins镜像再创建容器：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> &#123;IMAGE ID&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-访问8080端口"><a href="#3-3-访问8080端口" class="headerlink" title="3.3 访问8080端口"></a>3.3 访问8080端口</h3><p>此时启动创建好的镜像，访问8080端口。（服务器就公网ip:8080,本地就localhost）</p>
<p>这时候会有一个一长串的码，他会提示你位置，复制位置cat输出一下就可以，然后按照指示创建账号。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151506345.png" alt="image-20210324151506345"></p>
<p>根据创建好的账号登录即可。</p>
<h3 id="3-4-配置Maven"><a href="#3-4-配置Maven" class="headerlink" title="3.4 配置Maven"></a>3.4 配置Maven</h3><p>容器内是自带JDK环境的，可以 java -version确认一下</p>
<p>进入容器内部指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -ti --user root &#123;容器id&#125; sh</span><br></pre></td></tr></table></figure>



<p>下载maven，安装到任意路径下，配置环境变量（相关知识自行搜索maven安装）</p>
<p>我这里把maven安装到了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151526445.png" alt="image-20210324151526445"></p>
<p>这里我可能走了弯路，我是通过scp指令先将maven安装包发到服务器上，再通过docker cp将文件复制进去解压缩等。</p>
<p>配置环境变量(一定要添加在下面，我也不知道为啥，反正写在前面死活不行)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151538447.png" alt="image-20210324151538447"></p>
<p>注意：maven最好换个源（到maven路径下找到conf/settings.xml）直接把它删了替换成同名文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-到Jenkins中再配置配置"><a href="#3-5-到Jenkins中再配置配置" class="headerlink" title="3.5 到Jenkins中再配置配置"></a>3.5 到Jenkins中再配置配置</h3><h4 id="3-5-1-系统管理-全局工具配置"><a href="#3-5-1-系统管理-全局工具配置" class="headerlink" title="3.5.1 系统管理-全局工具配置"></a>3.5.1 系统管理-全局工具配置</h4><p>查找某个环境变量位置可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>

<h5 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h5><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151607702.png" alt="image-20210324151607702"></p>
<h5 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h5><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151633074.png" alt="image-20210324151633074"></p>
<h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151643485.png" alt="image-20210324151643485"></p>
<h4 id="3-5-1-系统管理-系统配置"><a href="#3-5-1-系统管理-系统配置" class="headerlink" title="3.5.1 系统管理-系统配置"></a>3.5.1 系统管理-系统配置</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151659247.png" alt="image-20210324151659247"></p>
<h3 id="3-6-Gitlab上整一个Maven项目"><a href="#3-6-Gitlab上整一个Maven项目" class="headerlink" title="3.6 Gitlab上整一个Maven项目"></a>3.6 Gitlab上整一个Maven项目</h3><p>到Jenkins上新建任务-流水线，我们可以先试一下，选择应用保存。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151737342.png" alt="image-20210324151737342"></p>
<p>点击“立即构建”。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151756143.png" alt="image-20210324151756143"></p>
<p>构建完成，并且可以到控制台查看输出 。</p>
<p>好了。下面我们实现三个功能：</p>
<ol>
<li>从gitlab拉取代码</li>
<li>maven构建打成war包</li>
<li>部署到Tomcat服务器</li>
</ol>
<p>值得高兴的是，Jenkins给了一个超级好用的功能，自动生成流水线脚本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151824044.png" alt="image-20210324151824044"></p>
<p>点击“流水线语法”，我们开始（分别对应上述三个阶段）：</p>
<ol>
<li>在Repoitory中填写自己gitlab的“clone”的http连接，在Credentials中添加自己的账户密码</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151839432.png" alt="image-20210324151839432"></p>
<ol start="2">
<li>shell命令 maven clean package (p.s. maven相关知识自己去学习)</li>
<li>在credentials中添加自己tomcat管理员的账号密码。具体添加方法百度。在Tomcat URL中添加自己的tomcat地址。（一般情况下是8080，我这里把tomcat文件也放到了docker同一个容器中，所以8080冲突，就把端口改成了8088）</li>
</ol>
<p>p.s 这里关于tomcat的操作大概有添加管理员，改端口两步。具体步骤就…（自己做的时候一点一点搜下来，没想到写成博客要这么多，懒了，这里不难）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151850753.png" alt="image-20210324151850753"></p>
<p>之后到ip:端口访问tomcat 到web-app里找，就可以访问啦。</p>
]]></content>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode新手村(1)</title>
    <url>/2021/03/23/leetcode%E6%96%B0%E6%89%8B%E6%9D%91-1/</url>
    <content><![CDATA[<h2 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h2><ol>
<li>#141 <a href="https://leetcode-cn.com/problems/linked-list-cycle/">环形链表</a></li>
</ol>
<ul>
<li>看待这道题的第一个思路是弄一个hashset，遍历一次链表，扫到一个就加一个，碰到已经存在的就说明有环</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasCycle = <span class="keyword">false</span>;</span><br><span class="line">        ListNode current = head;</span><br><span class="line">        Set&lt;ListNode&gt; Nodeset = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span>(current!=<span class="keyword">null</span>&amp;&amp;current.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Nodeset.contains(current))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Nodeset.add(current);</span><br><span class="line">            current=current.next;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasCycle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>想着双指针 就想到的一个离谱的方法 想象一下你和另外一个人从宿舍到操场上跑步 操场是一个环 只要你们速度不一样 就一定会相遇…</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode fast=head;</span><br><span class="line">        ListNode slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span>&amp;&amp;fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个思路的差距还是明显的。</p>
<p>然后就看题解，看到提出找到入环点的问题，然后搜了一堆，发现乱七八糟没看懂。</p>
<p>后来意外的发现这就是#142题，难度是中等，<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/linked-list-cycle-ii-kuai-man-zhi-zhen-shuang-zhi-/">评论有个题解</a>非常的清晰，比网上一堆博客清晰多了。这里暂时先不写。（p.s. 我的同学说他面试鹅厂的时候考到了这个（2021春招））</p>
<h2 id="题2"><a href="#题2" class="headerlink" title="题2"></a>题2</h2><ol start="2">
<li>#344 <a href="https://leetcode-cn.com/problems/reverse-string/">反转字符串</a></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=s.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            temp=s[left];</span><br><span class="line">            s[left]=s[right];</span><br><span class="line">            s[right]=temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="题3"><a href="#题3" class="headerlink" title="题3"></a>题3</h2><ol start="3">
<li>#881 <a href="https://leetcode-cn.com/problems/boats-to-save-people/">救生艇</a></li>
</ol>
<p>我的思路是先快速排序，再从两边向中间组队坐船，顺带着复习一波排序，结果还就那个离谱..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRescueBoats</span><span class="params">(<span class="keyword">int</span>[] people, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        quicksort(people);</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=people.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">while</span> ( left&lt;right &amp;&amp; people[left]+people[right]&gt;limit)&#123;</span><br><span class="line">                right--;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (left&lt;right&amp;&amp;people[left]+people[right]&lt;=limit)&#123;</span><br><span class="line">                right--;</span><br><span class="line">                left++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left==right)</span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        doSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low&gt;=high)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left=low;</span><br><span class="line">        <span class="keyword">int</span> right=high;</span><br><span class="line">        <span class="keyword">int</span> pivot=arr[low];</span><br><span class="line">        <span class="comment">// 1 2</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">while</span> (left&lt;right&amp;&amp;arr[right]&gt;pivot)&#123; <span class="comment">//注意left&lt;right</span></span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left&gt;=right)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tem=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=tem;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right&amp;&amp;arr[left]&lt;pivot)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left&gt;=right)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tem=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=tem;</span><br><span class="line">        &#125;</span><br><span class="line">        doSort(arr,low,left-<span class="number">1</span>); <span class="comment">//注意是pivot两侧</span></span><br><span class="line">        doSort(arr,left+<span class="number">1</span>,high);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210327182459708.png" alt="image-20210327182459708"></p>
<p>所以更好的思路是：</p>
<p>其实思路是一样的…但是手写排序没必要..在排序后的处理上下面代码更优</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRescueBoats</span><span class="params">(<span class="keyword">int</span>[] people, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(people);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = people.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">if</span> (people[i] + people[j] &lt;= limit)</span><br><span class="line">                i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仅仅只是把自己的快速排序换成了Arrays封装的排序，速度就提升了将近40倍？？？</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210327182900393.png" alt="image-20210327182900393"></p>
<p>补充：</p>
<ol>
<li>给class实现一个comparator接口，就可以对象比较.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        size = s;</span><br><span class="line">        weight = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.size - o2.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>, <span class="number">50</span>);</span><br><span class="line">        Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">        Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>, <span class="number">40</span>);</span><br><span class="line">        Dog[] dogArray = &#123;d1, d2, d3&#125;;</span><br><span class="line">        Arrays.sort(dogArray, <span class="keyword">new</span> DogSizeComparator());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Arrays.sort()底层有一个阈值，之下用插入，之上用优化的快速排序（pivot的选择）</li>
</ol>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode新手村-2</title>
    <url>/2021/03/27/leetcode%E6%96%B0%E6%89%8B%E6%9D%91-2/</url>
    <content><![CDATA[<p>动态规划，面试官的法宝。</p>
<h2 id="题1-509"><a href="#题1-509" class="headerlink" title="题1 #509"></a>题1 #509</h2><p>#509 <a href="https://leetcode-cn.com/problems/fibonacci-number/">斐波那契数</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210327190223962.png" alt="image-20210327190223962"></p>
<p>emmm….递归慢，原因是做了很多重复计算，如果我们用空间换时间，把已经计算的结果记录下来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] book =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">300</span>];</span><br><span class="line">      <span class="comment">//用vector会更合适- -</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">300</span>;i++)&#123;</span><br><span class="line">            book[i]=-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doFib(book,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doFib</span><span class="params">(<span class="keyword">int</span>[] book,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (book[n]!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> book[n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            book[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;</span><br><span class="line">            book[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        book[n]=doFib(book,n-<span class="number">1</span>)+doFib(book,n-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> book[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public static void main(String[] args) &#123;</span></span><br><span class="line">    <span class="comment">//     Solution solution =new Solution();</span></span><br><span class="line">    <span class="comment">//     System.out.println(solution.fib(3));</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>![image-20210328170352274](/Users/xuyuxuan/Library/Application Support/typora-user-images/image-20210328170352274.png)</p>
<h2 id="题2-62"><a href="#题2-62" class="headerlink" title="题2 #62"></a>题2 #62</h2><p>#62 <a href="https://leetcode-cn.com/problems/unique-paths/">不同路径</a></p>
<p>首先想到的是用组合数做..mxn的格子一共需要走(M+N-2)步，只需要在这些步数中找出（M-1）步走下就行，也就是说需要C（M-1，M+N-2）就可以。</p>
<p>我本以为几分钟写完，结果没有搜到java内置的Math相关方法</p>
<p>自己写组合数计算公式疯狂越界，只能边求边化简..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> a=m+n-<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">long</span> b=m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b&gt;a/<span class="number">2</span>)&#123;</span><br><span class="line">            b=a-b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b;i++)&#123;</span><br><span class="line">            ans=ans*(a-i);</span><br><span class="line">            ans=ans/(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考虑利用动态规划的思想,递归处理，记录已经计算的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[][] arr=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">               arr[i][j]=-<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> func(arr,m,n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>[][] arr,<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[m-<span class="number">1</span>][n-<span class="number">1</span>]!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m==<span class="number">1</span>)&#123;</span><br><span class="line">            arr[m-<span class="number">1</span>][n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            arr[m-<span class="number">1</span>][n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[m-<span class="number">1</span>][n-<span class="number">1</span>]=func(arr,m-<span class="number">1</span>,n)+func(arr,m,n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再精简一点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题3-121"><a href="#题3-121" class="headerlink" title="题3 #121"></a>题3 #121</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210704115715.png" alt="image-20210704115715269" style="zoom:67%;" />

<p>暴力求解直接超时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;prices.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (prices[j]-prices[i]&gt;max)&#123;</span><br><span class="line">                    max=prices[j]-prices[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>arr[i]视作第i天卖的最大收入，显然等于price[i]-min{price[j]},j&lt;i</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=prices.length;</span><br><span class="line">        <span class="keyword">int</span>[] minPrice=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="comment">// minPrice[n]=min&#123;minPrice[n-1],price[n]&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">                minPrice[i]=prices[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                minPrice[i]=Math.min(minPrice[i-<span class="number">1</span>],prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] maxPrice=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="comment">// maxPrice[n]=prices[n]-minPrice[n]</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            maxPrice[i]=prices[i]-minPrice[i];</span><br><span class="line">            <span class="keyword">if</span> (maxPrice[i]&gt;ans)</span><br><span class="line">                ans=maxPrice[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是效果依旧不是很理想</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210329113233734.png" alt="image-20210329113233734">事实上我们不需数组来存储之前的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=prices.length;</span><br><span class="line">        <span class="keyword">int</span> minPrice=prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// maxPrice=max&#123;prices[n]-minPrice[n],maxPrice&#125;</span></span><br><span class="line">        <span class="keyword">int</span> maxPrice=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            minPrice=Math.min(minPrice,prices[i]);</span><br><span class="line">            <span class="keyword">if</span>(prices[i]-minPrice&gt;maxPrice)</span><br><span class="line">                maxPrice=prices[i]-minPrice;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210329114607962.png" alt="image-20210329114607962"></p>
<h2 id="题4-70"><a href="#题4-70" class="headerlink" title="题4 #70"></a>题4 #70</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210704120842.png" alt="image-20210704120842567"></p>
<p>一维数组记笔记 没什么好说的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//f(n)=f(n-1)+f(n-2)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">return</span> doFunc(arr,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">doFunc</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[n-<span class="number">1</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[n-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            arr[n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">2</span>)&#123;</span><br><span class="line">            arr[n-<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[n-<span class="number">1</span>]=doFunc(arr,n-<span class="number">1</span>)+doFunc(arr,n-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210329115857194.png" alt="image-20210329115857194"></p>
<h2 id="题5-279"><a href="#题5-279" class="headerlink" title="题5 #279"></a>题5 #279</h2><img src="/Users/xuyuxuan/Library/Application Support/typora-user-images/image-20210704120909369.png" alt="image-20210704120909369" style="zoom:67%;" />

<p>这题把问题分解的过程就是把一个数n分解成组成这个数最大的完全平方数和其他数字；</p>
<p>这里走的弯路是开始没有想到通过遍历来找到最少组合情况下的最大的完全平方数；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//组成n最大的完全平方数x^2,x&lt;=(int)Math.floor(Math.sqrt(n)),故遍历1-x</span></span><br><span class="line">    arr[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//由于n较大的情况完全由较小的情况决定，可以从1开始算</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(<span class="keyword">int</span>)Math.floor(Math.sqrt(j));i++)&#123;</span><br><span class="line">            min=Math.min(arr[j-i*i]+<span class="number">1</span>,min);</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j]=min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210704135900.png" alt="image-20210704135900306"></p>
<h2 id="题6-221"><a href="#题6-221" class="headerlink" title="题6 #221"></a>题6 #221</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210704140148.png" alt="image-20210704140148534" style="zoom:67%;" />



<p>这题看了题解也理解了半天…</p>
<p>先来一道简单点的#1277：给你一个 <code>m * n</code> 的矩阵，矩阵中的元素不是 <code>0</code> 就是 <code>1</code>，请你统计并返回其中完全由 <code>1</code> 组成的 <strong>正方形</strong> 子矩阵的个数。</p>
<p>这道题最重要的就是dp状态转移方程的确定。dp[i]][j]表示以i,j为右下角的正方形的最大的边长，可以想到dp[i][j]可以是由dp[i-1][j],dp[i][j-1],dp[i-1][j-1]决定：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210704145757.png" alt="image-20210704145757624"></p>
<p>这道题还有一个巧妙的点，你这样计算得到的dp[i][j]同样就是正方形的数量，最后求和。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSquares</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m=matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> n=matrix.length;</span><br><span class="line">    <span class="keyword">int</span>[][] ans=<span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">    <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i*j==<span class="number">0</span>)</span><br><span class="line">                <span class="comment">//如果是边缘的情况</span></span><br><span class="line">                ans[i][j]=matrix[i][j];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果是内部的情况</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j]==<span class="number">0</span>)</span><br><span class="line">                    ans[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ans[i][j]=Math.min(ans[i-<span class="number">1</span>][j],Math.min(ans[i][j-<span class="number">1</span>],ans[i-<span class="number">1</span>][j-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result+=ans[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到#221 那么只要找到最大的数字，返回平方就可,注意输入是char数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m=matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> n=matrix.length;</span><br><span class="line">    <span class="keyword">int</span>[][] ans=<span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">    <span class="keyword">int</span> result=Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i*j==<span class="number">0</span>)</span><br><span class="line">                <span class="comment">//如果是边缘的情况</span></span><br><span class="line">                ans[i][j]=matrix[i][j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果是内部的情况</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j]==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                    ans[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ans[i][j]=Math.min(ans[i-<span class="number">1</span>][j],Math.min(ans[i][j-<span class="number">1</span>],ans[i-<span class="number">1</span>][j-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ans[i][j]&gt;result)</span><br><span class="line">                result=ans[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result*result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>便利蜂笔试</title>
    <url>/2021/03/20/%E4%BE%BF%E5%88%A9%E8%9C%82%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<p>2021-春招</p>
<p>便利蜂笔试回忆</p>
<a id="more"></a>

<p>15个选择（30分）+三道编程（70分）</p>
<p>选择题全是瞎猜的。。编程题感觉写了一题结果超时了而且没有全部ac</p>
<p>最离谱的是想不起来怎么用JAVA读输入..最后用python写的</p>
<p>下面是回忆</p>
<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><p>网络+cpp基础知识+数据库+集成测试工具+UML+…想不起来了</p>
<p>比如http属于第几层</p>
<p>数据库的xx操作体现四大特点的哪个</p>
<p>CPP主要是虚函数 类初始化顺序等</p>
<h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><ol>
<li>假设有一个矩阵，矩阵由 0 和 1 数字组成。其中1代表这个节点可达，0代表这个节点不可达，从左上角第一个节点出发到右下角最后一个节点，只能上下左右移动，初始节点数为 1，移动一步节点数加 1，问最少需要经过多少节点可以达到。请实现计算最短路径的函数。如果不可达返回0。</li>
</ol>
<p>输入</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在便利店中顾客的结账时间是很重要的指标。结账时间由排队等待时间，和顾客操作付款时间两部分组成。程序输入为顾客列表 customers，每一位顾客 customer[i] 包含两个数值 arriveTime, payDuration。 请计算所有顾客的总结账时间。</p>
</li>
</ol>
<ul>
<li>arriveTime 表示顾客挑选完商品去结账的时刻；</li>
<li>payDuration 表示顾客操作付款的时间。</li>
</ul>
<p>输入</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span> </span><br><span class="line"><span class="number">2</span>,<span class="number">5</span> </span><br><span class="line"><span class="number">4</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>给定一组词组，每个词组包含id和字符串的映射，现输入另一组词组，要求找出新的词组与老的词组的diff关系，diff要求如下：<br>1、id相同且字符串相同的两个词组视为相同<br>2、id相同，且字符串不同的输出modify+id<br>3、新的词组id在老的词组id中不存在的，视为新增，输出add+id<br>4、老的词组id在新的词组id中不存在的，视为删除，输出delete+id</p>
</li>
</ol>
]]></content>
      <categories>
        <category>求职</category>
      </categories>
      <tags>
        <tag>春招</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里1面</title>
    <url>/2021/03/28/%E9%98%BF%E9%87%8C1%E9%9D%A2/</url>
    <content><![CDATA[<p>2021-3-28</p>
<p>阿里一面 面试官一直试图明白我到底会什么</p>
<p>面试官：”我听说你用过xxx，那你知道xxx嘛？”</p>
<p>我：“不知道”</p>
<h1 id="问题汇总："><a href="#问题汇总：" class="headerlink" title="问题汇总："></a>问题汇总：</h1><h2 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1 自我介绍"></a>1 自我介绍</h2><p>介绍学过什么课，做过什么项目</p>
<h2 id="2-简历中写到NJU酒店管理系统（开始白给）"><a href="#2-简历中写到NJU酒店管理系统（开始白给）" class="headerlink" title="2 简历中写到NJU酒店管理系统（开始白给）"></a>2 简历中写到NJU酒店管理系统（开始白给）</h2><h3 id="2-1-数据库"><a href="#2-1-数据库" class="headerlink" title="2.1 数据库"></a>2.1 数据库</h3><ol>
<li>介绍一下你们的数据库设计</li>
<li>这个数据库使用了第几范式</li>
<li>是否使用了<strong>索引</strong> （踩大坑上了 索引除了知道B+ tree其余一概不知）<ol>
<li>索引的底层实现结构</li>
<li>索引设计（查看自己用户信息，查看一年订单，查看酒店优惠）</li>
<li>（A, B, C）A，B联合索引，select B是否可以</li>
</ol>
</li>
<li>事务的四个特点解释<ol>
<li>原子性</li>
<li>一致性</li>
<li>隔离性<ol>
<li>四个隔离级别（完全没听过）</li>
</ol>
</li>
<li>持久性</li>
</ol>
</li>
</ol>
<h3 id="2-2-Springboot"><a href="#2-2-Springboot" class="headerlink" title="2.2 Springboot"></a>2.2 Springboot</h3><ol>
<li>Spring的作用</li>
<li>介绍一下IOC</li>
<li>注入的方式有哪些<ol>
<li>@autowire 一个接口两个Bean 会出现什么问题如何解决</li>
</ol>
</li>
<li>Bean的生命周期<ol>
<li>你读过源码吗？没有。那这个问题不问了（本来还能扯一扯）</li>
</ol>
</li>
<li>怎么理解AOP</li>
<li>AOP 的实现方法有哪些</li>
<li>比如一个类A有三个方法，M1，M2，M3 对M3切面，M1调用M3，切面是否生效</li>
</ol>
<h2 id="3-JAVA基础"><a href="#3-JAVA基础" class="headerlink" title="3 JAVA基础"></a>3 JAVA基础</h2><p>面试官问我对java了解到什么程度，我说只能了解一点点，走成华大道..</p>
<h3 id="3-1-集合"><a href="#3-1-集合" class="headerlink" title="3.1 集合"></a>3.1 集合</h3><ol>
<li>你知道java集合有哪些数据结构</li>
<li>讲一讲hashmap（他问我了解哪个，我说我只看过这个）</li>
<li>hashmap和hashtable的区别</li>
<li>concurrenthashmap和hashmap的区别</li>
<li>为什么是线程安全的（hashtable，currenthashmap？）</li>
</ol>
<h3 id="3-2-线程"><a href="#3-2-线程" class="headerlink" title="3.2 线程"></a>3.2 线程</h3><ol>
<li><p>使用线程的三种方式</p>
</li>
<li><p>runnale和callable的区别</p>
</li>
<li><p>线程池</p>
<p>这里我说我对线程的了解就到这了，面试官就不问了</p>
</li>
</ol>
<h3 id="3-3-JVM"><a href="#3-3-JVM" class="headerlink" title="3.3  JVM"></a>3.3  JVM</h3><p>让我自己说对JVM的了解</p>
<p>我就拿出了我早晨恶补一小时的JVM体系结构图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210328111654442.png" alt="image-20210328111654442"></p>
<ol>
<li>String a=“a” String b=new String（“a”） a==b?</li>
</ol>
<p>这里我说不等，因为一个在常量池一个在堆中，他问我怎么样才能相等，我说.equals()</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210328112012176.png" alt="image-20210328112012176"></p>
<ol start="2">
<li>s1=”a” s2=”b” s3=”a”+”b” 存储？</li>
</ol>
<p>我这里说都在常量池..我现在有点忘了他问的是a+b还是s1+s2</p>
<p>后者在堆中</p>
<ol start="3">
<li><p><strong>类加载器</strong></p>
<ol>
<li>类加载方式</li>
</ol>
<p>我balabal胡扯一堆，用上了早晨刚看到的名词“双亲委托模式”</p>
<ol start="2">
<li>那双亲委托的作用是什么？</li>
</ol>
<p>卒。</p>
<ol start="3">
<li>举个例子，比如不同目录下的同名类，用了双亲委托和不用有什么区别？</li>
</ol>
<p>卒。</p>
</li>
</ol>
<h2 id="4-你有什么想问我的"><a href="#4-你有什么想问我的" class="headerlink" title="4 你有什么想问我的"></a>4 你有什么想问我的</h2><p>开始胡扯，总结一下是希望我掌握：</p>
<ol>
<li>数据库是基础，我一直强调索引，你不会balaba，因为这是和实战相关的</li>
<li>JAVA基础、框架、缓存（Redis）</li>
<li>分布式框架是加分项，对实习生没有什么要求</li>
<li>Spring框架多了解原理</li>
</ol>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>估计阿里面试之旅已经结束，毕竟准备时间顶多四五个小时</p>
<p>忙着英语考试但是英语也准备的不好…</p>
<p>面试官整体很nice 也没有狂怼我 只有我孤独的尴尬</p>
<p>早点考完两个语言考试。</p>
<p>下次还来。</p>
<p>///</p>
<p>12点的时候查看已经被挂掉辣</p>
<p>泪目</p>
]]></content>
      <categories>
        <category>求职</category>
      </categories>
      <tags>
        <tag>春招</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里笔试</title>
    <url>/2021/03/24/%E9%98%BF%E9%87%8C%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<p>2021-3-24</p>
<p>阿里笔试两道题，这次整体偏简单，但是好像有点离谱</p>
<p>我还是0分</p>
<h3 id="第一道题："><a href="#第一道题：" class="headerlink" title="第一道题："></a>第一道题：</h3><p> 牛牛喜欢跳格子，希望我帮他计算出跳n个格子的最大值，  </p>
<p> 题意：  </p>
<p>有n个格子，跳1格只能拿跳到的那一格的一半分（如果不能整除则向上取整），跳2格可以拿第2格的全部分，问跳n格最多能拿多少分。  </p>
<h3 id="第二道题："><a href="#第二道题：" class="headerlink" title="第二道题："></a>第二道题：</h3><p>   给你二叉树的权值，前序遍历以及中序遍历的值，还原出二叉树，且找出子树中对称的且权重最大的子树，输出其权值和。</p>
<p>第二题直接没看</p>
<p>第一题感觉做出来了ac全是0</p>
<p>跑到牛客网上看了，和大佬全ac的区别好像是题目意思丢掉的分数向上取整。</p>
<p>人气晕了。</p>
]]></content>
      <categories>
        <category>求职</category>
      </categories>
      <tags>
        <tag>春招</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>linux程序设计-复习背诵</title>
    <url>/2021/04/22/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E5%A4%8D%E4%B9%A0%E8%83%8C%E8%AF%B5/</url>
    <content><![CDATA[<h1 id="Ch1-1-linux-basics1"><a href="#Ch1-1-linux-basics1" class="headerlink" title="Ch1-1 linux basics1"></a>Ch1-1 linux basics1</h1><h2 id="1-什么是Linux"><a href="#1-什么是Linux" class="headerlink" title="1 什么是Linux"></a>1 什么是Linux</h2><p>在GNU通用公共许可证下开发的免费unix类型操作系统。</p>
<p>开源；使用广泛；支持大部分平台</p>
<h2 id="2-常用发行版及其特点"><a href="#2-常用发行版及其特点" class="headerlink" title="2 常用发行版及其特点"></a>2 常用发行版及其特点</h2><ul>
<li><p>Red Hat</p>
<ul>
<li>支持和硬件平台多</li>
<li>拥有企业级的支持系统，是商业操作系统</li>
<li>独特的RPM升级方式</li>
</ul>
</li>
<li><p>Ubuntu</p>
<ul>
<li>一个简单但强大的操作系统，适合初级用户</li>
<li>对硬件支持最好最全面</li>
<li>默认不能直接<em>root</em> 登陆</li>
</ul>
</li>
<li><p>Cent OS</p>
<ul>
<li>一个为专家级用户制定的操作平台</li>
<li>Cent OS是一个免费且开源的发行版</li>
</ul>
</li>
</ul>
<h2 id="3-引导程序的作用"><a href="#3-引导程序的作用" class="headerlink" title="3 引导程序的作用"></a>3 引导程序的作用</h2><ul>
<li>一个引导程序装载并且启动Linux内核<ul>
<li>可以将引导参数传递给Linux内核，比如设备信息</li>
<li>可以有选择地加载初始根磁盘</li>
<li>可以引导其他操作系统</li>
</ul>
</li>
<li>常用：LILO(Linux Loader) GRUB(Grand Unified Boot Loader)</li>
<li>通常在  /dev/hda配置</li>
</ul>
<h2 id="4-linux图形界面与命令行界面好处"><a href="#4-linux图形界面与命令行界面好处" class="headerlink" title="4  linux图形界面与命令行界面好处"></a>4  linux图形界面与命令行界面好处</h2><ul>
<li>图形界面用户友好</li>
<li>命令行高效、高生产性</li>
</ul>
<h2 id="5-apt-get-原理"><a href="#5-apt-get-原理" class="headerlink" title="5  apt-get 原理"></a>5  apt-get 原理</h2><p>扫描本地存放的软件包更新列表（由“apt-get update”命令刷新更新列表，也就是/var/lib/apt/lists/），找到最新版本的软件包；</p>
<p>进行软件包依赖关系检查，找到支持该软件正常运行的所有软件包；</p>
<p>从软件源所指 的镜像站点中，下载相关软件包，并存放在/var/cache/apt/archive；</p>
<p>第四步，解压软件包，并自动完成应用程序的安装和配置。<br>链接：<a href="https://www.jianshu.com/p/b2eed75b9855">https://www.jianshu.com/p/b2eed75b9855</a></p>
<h2 id="6-基本命令"><a href="#6-基本命令" class="headerlink" title="6 基本命令"></a>6 基本命令</h2><p><strong>1.1 安装软件涉及到的命令</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210419183613569.png" alt="image-20210419183613569"></p>
<p><strong>1.2 对目录使用</strong></p>
<ul>
<li>pwd</li>
<li>cd</li>
<li>mkdir</li>
<li>rmdir</li>
<li>ls<ul>
<li>-l 显示不隐藏的文件与文件夹的详细信息</li>
<li>-a 显示当前目录下的所有文件及文件夹包括隐藏的.和..等</li>
<li>-R 将目录下所有的子目录的文件都列出来(递归)</li>
</ul>
</li>
</ul>
<p>fileTypes权限包括 User Group Others</p>
<p>各个字段的含义：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210419181016391.png" alt="image-20210419181016391"></p>
<p><strong>1.3 对文件使用</strong></p>
<ul>
<li><p>touch: update the access and/or modification time</p>
<p>of a files</p>
</li>
<li><p>cp: copy files</p>
</li>
<li><p>mv: move and <strong>rename files</strong></p>
</li>
<li><p>ln: link files. </p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ln -s source<span class="selector-class">.txt</span> symbolic.txt</span><br><span class="line">ln -d source<span class="selector-class">.txt</span> hard<span class="selector-class">.txt</span> <span class="comment">//-d 可以省略</span></span><br></pre></td></tr></table></figure>

<ul>
<li>rm: remove files</li>
<li>cat: print file contents</li>
<li>more/less: display files page by page</li>
</ul>
<p><strong>1.4 对进程使用</strong></p>
<ul>
<li>ps ：命令用于显示当前进程的状态 -a 列出所有进程</li>
<li>pstree： Linux pstree命令将所有行程以树状图显示，树状图将会以 pid (如果有指定) 或是以 init 这个基本行程为根 (root)，如果有指定使用者 id，则树状图会只显示该使用者所拥有的行程。</li>
<li>jobs ：jobs命令允许查看shell当前正在处理的作业</li>
<li>bg：将一个在后台暂停的命令，变成继续执行</li>
<li>fg：将后台中的命令调至前台继续运行</li>
<li>ctrl+z：可以将一个正在前台执行的命令放到后台，并且暂停</li>
<li>nohup：不挂断地运行命令。</li>
<li>nice renice：以更改过的优先序来执行程序 ｜命令用于重新指定一个或多个行程（Process）的优先序 </li>
<li>Top：top命令用于实时显示 process 的动态。</li>
</ul>
<p><strong>1.5 查询帮助</strong></p>
<ul>
<li>man</li>
<li>info</li>
</ul>
<p><strong>1.6 其它一些命令</strong></p>
<ul>
<li>passwd 改密码</li>
<li>mkpasswd 创造随机密码</li>
<li>date\cal 日期</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210419183757897.png" alt="image-20210419183757897"></p>
<ul>
<li><p>who finger 找出谁在系统活跃</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210419183942158.png" alt="image-20210419183942158"></p>
</li>
<li><p>echo</p>
</li>
<li><p>write walk talk 命令用于传讯息给其他使用者;mesg y/n</p>
</li>
</ul>
<p><strong>编辑文件</strong></p>
<ul>
<li>vi</li>
<li>emacs</li>
<li>ged</li>
</ul>
<h2 id="7-进程的概念"><a href="#7-进程的概念" class="headerlink" title="7 进程的概念"></a>7 进程的概念</h2><p>进程是一个正在执行的程序实例。由执行程序、它的当前值、状态信息以及通过操作系统管理此进程执行情况的资源组成</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">echo $$ 查看当前<span class="keyword">shell</span><span class="bash">进程号</span></span><br></pre></td></tr></table></figure>

<h2 id="8-文件类型"><a href="#8-文件类型" class="headerlink" title="8 文件类型"></a>8 文件类型</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210419184459817.png" alt="image-20210419184459817"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421135755079.png" alt="image-20210421135755079"></p>
<p>p.s　　FIFO，又称作命名管道（named pipe），它是Linux系统中用于进程间通信的一种方法。</p>
<h2 id="9-文件夹组织"><a href="#9-文件夹组织" class="headerlink" title="9 文件夹组织"></a>9 文件夹组织</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210419184538635.png" alt="image-20210419184538635"></p>
<ul>
<li>home</li>
<li>dev</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/22730871-e989d57ad227bf0b.png?imageMogr2/auto-orient/strip"></p>
<h2 id="10-权限"><a href="#10-权限" class="headerlink" title="10 权限"></a>10 权限</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210419184823884.png" alt="image-20210419184823884"></p>
<p>更换权限：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">chmod ugo += r file</span><br><span class="line">chmod <span class="number">7</span>(<span class="name">user</span>)<span class="number">6</span>(<span class="name">group</span>)<span class="number">5</span>(<span class="name">users</span>) file</span><br></pre></td></tr></table></figure>

<p>file默认644；directory默认755</p>
<h2 id="11-层次图"><a href="#11-层次图" class="headerlink" title="11 层次图"></a>11 层次图</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210419185615981.png" alt="image-20210419185615981"></p>
<h1 id="Ch1-2-Linux-Basics2"><a href="#Ch1-2-Linux-Basics2" class="headerlink" title="Ch1-2 Linux Basics2"></a>Ch1-2 Linux Basics2</h1><h2 id="1-命令"><a href="#1-命令" class="headerlink" title="1 命令"></a>1 命令</h2><ul>
<li>mknod</li>
<li>mkfifo</li>
<li>chown</li>
<li>chgrp</li>
<li><strong>find</strong></li>
</ul>
<p><a href="https://www.runoob.com/linux/linux-comm-find.html">find</a></p>
<ul>
<li><strong>grep</strong></li>
</ul>
<p><a href="https://www.runoob.com/linux/linux-comm-grep.html">grep</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425214245313.png" alt="image-20210425214245313"></p>
<ul>
<li><strong>sed</strong></li>
</ul>
<p><a href="https://www.runoob.com/linux/linux-comm-sed.html">sed</a></p>
<ul>
<li>comm</li>
</ul>
<p>Linux comm 命令用于比较两个已排过序的文件。</p>
<p>这项指令会一列列地比较两个已排序文件的差异，并将其结果显示出来，如果没有指定任何参数，则会把结果分成 3 列显示：第 1 列仅是在第 1 个文件中出现过的列，第 2 列是仅在第 2 个文件中出现过的列，第 3 列则是在第 1 与第 2 个文件里都出现过的列。若给予的文件名称为 <strong>-</strong> ，则 comm 指令会从标准输入设备读取数据。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425214726190.png" alt="image-20210425214726190"></p>
<h3 id="作业题："><a href="#作业题：" class="headerlink" title="作业题："></a>作业题：</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425214555642.png" alt="image-20210425214555642"></p>
<h2 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2 重定向"></a>2 重定向</h2><h3 id="2-1-重定向有哪些种？详细介绍每种的功能"><a href="#2-1-重定向有哪些种？详细介绍每种的功能" class="headerlink" title="2.1 重定向有哪些种？详细介绍每种的功能"></a>2.1 重定向有哪些种？详细介绍每种的功能</h3><ul>
<li>输入重定向 0</li>
</ul>
<p>将某一文件的内容作为命令的输入</p>
<ul>
<li>输出重定向 1</li>
</ul>
<p>将某一命令执行的输出保存到文件中，如果已经存在相同的文件，那么覆盖源文件中的内容</p>
<ul>
<li>错误重定向 2</li>
</ul>
<p>将某一命令执行的出错信息输出到指定文件中</p>
<p>e.g.</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输出/入重定向: &gt; / &lt;</span><br><span class="line">输出/入追加重定向: &gt;&gt; / &lt;&lt;</span><br><span class="line">错误重定向: [命令] <span class="number">2</span>&gt; [文件]</span><br><span class="line">错误追加：<span class="number">2</span>&gt;</span><br><span class="line">同时实现输出和错误重定向: [命令] &amp;&gt; [文件]</span><br><span class="line"></span><br><span class="line">ls <span class="number">2</span>&gt;<span class="number">1</span> 不会报没有<span class="number">2</span>文件的错误，但会输出一个空的文件<span class="number">1</span>；</span><br><span class="line">ls xxx <span class="number">2</span>&gt;<span class="number">1</span> 没有xxx这个文件的错误输出到了<span class="number">1</span>中；</span><br><span class="line">ls xxx <span class="number">2</span>&gt;&amp;<span class="number">1</span> 不会生成<span class="number">1</span>这个文件了，不过错误跑到标准输出了；</span><br><span class="line">ls xxx &gt;<span class="keyword">out</span>.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span>, 实际上可换成 ls xxx <span class="number">1</span>&gt;<span class="keyword">out</span>.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span>；重定向符号&gt;默认是<span class="number">1</span>,错误和输出都传到<span class="keyword">out</span>.txt了。</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210420195719386.png" alt="image-20210420195719386"></p>
<h3 id="2-2-实现机制"><a href="#2-2-实现机制" class="headerlink" title="2.2 实现机制"></a>2.2 实现机制</h3><p>主要通过使用dup2系统调用通过明确指定目标描述符来把一个文件描述符复制为另外一个</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> new_fd;</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;./test.file&quot;</span>, O_RDWR | O_CREAT | O_TRUNC, <span class="number">0666</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fd = %d\n&quot;</span>, fd);</span><br><span class="line"></span><br><span class="line">    dup2(fd, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-管道"><a href="#3-管道" class="headerlink" title="3 管道"></a>3 管道</h2><p>一个进程的输出作为另一个进程的输入</p>
<h2 id="4-环境变量"><a href="#4-环境变量" class="headerlink" title="4 环境变量"></a>4 环境变量</h2><ul>
<li>操作环节的参数</li>
<li>查看和设置环境变量<ul>
<li>echo env set</li>
</ul>
</li>
</ul>
<h2 id="5-简单正则"><a href="#5-简单正则" class="headerlink" title="5 简单正则"></a>5 简单正则</h2><h1 id="Ch2-shell-programming"><a href="#Ch2-shell-programming" class="headerlink" title="Ch2 shell programming"></a>Ch2 shell programming</h1><h2 id="1-shell的位置，是一个怎样的程序"><a href="#1-shell的位置，是一个怎样的程序" class="headerlink" title="1 shell的位置，是一个怎样的程序"></a>1 shell的位置，是一个怎样的程序</h2><ul>
<li>A command interpreter and programming environment</li>
<li>用户和操作系统之间的接口</li>
<li>核外程序</li>
</ul>
<p>ps. shell的主要功能，拿命令行 哪些是shell自己处理的，哪些是交给shell启动的进程处理</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210420214017272.png" alt="image-20210420214017272"></p>
<h2 id="2-常见shell"><a href="#2-常见shell" class="headerlink" title="2 常见shell"></a>2 常见shell</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210420213728885.png" alt="image-20210420213728885"></p>
<h2 id="3-脚本执行的方式"><a href="#3-脚本执行的方式" class="headerlink" title="3 脚本执行的方式 *"></a>3 脚本执行的方式 *</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh script_file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sh是bash别名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x script_file</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./script_file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给脚本执行权限</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> script_file</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> .script_file</span></span><br><span class="line"><span class="meta">#</span><span class="bash">与前两种不同，使用的是当前的shell进程，前两种会新建shell进程执行脚本</span></span><br></pre></td></tr></table></figure>

<h2 id="4-环境变量-1"><a href="#4-环境变量-1" class="headerlink" title="4 环境变量"></a>4 环境变量</h2><h3 id="4-1-linux读取-amp-配置环境变量"><a href="#4-1-linux读取-amp-配置环境变量" class="headerlink" title="4.1 linux读取&amp;配置环境变量"></a>4.1 linux读取&amp;配置环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">读取</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置</span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 方法1</span></span><br><span class="line">export PATH=/home/uusama/mysql/bin:$PATH</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 方法2</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line">export PATH=$PATH:/home/uusama/mysql/bin</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="4-2-read"><a href="#4-2-read" class="headerlink" title="4.2 read"></a>4.2 read</h3><ul>
<li><p>Linux read命令用于从标准输入读取数值。</p>
</li>
<li><p>read 内部命令被用来从标准输入读取单行数据。这个命令可以用来读取键盘输入，当使用重定向的时候，可以读取文件中的一行数据。</p>
</li>
<li><p>-p -t -n -s</p>
</li>
</ul>
<p><a href="https://www.runoob.com/linux/linux-comm-read.html">READ</a></p>
<h3 id="4-3-引号的用法"><a href="#4-3-引号的用法" class="headerlink" title="4.3 引号的用法"></a>4.3 引号的用法</h3><ul>
<li>单引号内的所有字符都保持它本身字符的意思，而不 会被bash进行解释，例如，$就是$本身而不再是bash 的变量引用符；\就是\本身而不再是bash的转义字符</li>
<li>除了$、``（不是单引号）和\外，双引号内的所有字符将保持字符本身的含义而不被bash解释。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210420215759169.png" alt="image-20210420215759169"></p>
<h3 id="4-4-常用"><a href="#4-4-常用" class="headerlink" title="4.4 常用"></a>4.4 常用</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210420220030514.png" alt="image-20210420220030514"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210420220206897.png" alt="image-20210420220206897"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210420220220397.png" alt="image-20210420220220397"></p>
<h2 id="5-语法"><a href="#5-语法" class="headerlink" title="5 语法"></a>5 语法</h2><h3 id="5-1-if-amp-test"><a href="#5-1-if-amp-test" class="headerlink" title="5.1 if &amp; test"></a>5.1 if &amp; test</h3><ul>
<li>字符串比较</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425204338541.png" alt="image-20210425204338541"></p>
<ul>
<li>算数比较</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425204408664.png" alt="image-20210425204408664"></p>
<ul>
<li>与文件有关的测试</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425204455666.png" alt="image-20210425204455666"></p>
<ul>
<li>逻辑操作</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425205616921.png" alt="image-20210425205616921"></p>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425205838622.png" alt="image-20210425205838622"></p>
<h3 id="5-2-case"><a href="#5-2-case" class="headerlink" title="5.2 case"></a>5.2 case</h3><h4 id="形式："><a href="#形式：" class="headerlink" title="形式："></a>形式：</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210004161.png" alt="image-20210425210004161"></p>
<h4 id="example："><a href="#example：" class="headerlink" title="example："></a>example：</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210012699.png" alt="image-20210425210012699"></p>
<h3 id="5-3-for-amp-while-amp-until-amp-selesct"><a href="#5-3-for-amp-while-amp-until-amp-selesct" class="headerlink" title="5.3 for &amp; while &amp; until &amp; selesct"></a>5.3 for &amp; while &amp; until &amp; selesct</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210234657.png" alt="image-20210425210234657"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210241674.png" alt="image-20210425210241674"></p>
<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210301412.png" alt="image-20210425210301412"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210323453.png" alt="image-20210425210323453"></p>
<h4 id="until（不建议使用）"><a href="#until（不建议使用）" class="headerlink" title="until（不建议使用）"></a>until（不建议使用）</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210353629.png" alt="image-20210425210353629"></p>
<h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210455311.png" alt="image-20210425210455311"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210502217.png" alt="image-20210425210502217"></p>
<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425210633286.png" alt="image-20210425210633286"></p>
<h3 id="算术扩展"><a href="#算术扩展" class="headerlink" title="算术扩展"></a>算术扩展</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425211257356.png" alt="image-20210425211257356"></p>
<h3 id="即时文档"><a href="#即时文档" class="headerlink" title="即时文档"></a>即时文档</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425211341408.png" alt="image-20210425211341408"></p>
<h1 id="Ch3-0-Linux-Programming-Prerequisite"><a href="#Ch3-0-Linux-Programming-Prerequisite" class="headerlink" title="Ch3-0 Linux Programming Prerequisite"></a>Ch3-0 Linux Programming Prerequisite</h1><h2 id="1-编译的原理"><a href="#1-编译的原理" class="headerlink" title="1 编译的原理"></a>1 编译的原理</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425212157217.png" alt="image-20210425212157217"></p>
<h2 id="2-GCC-（给编译命令理解，找错）"><a href="#2-GCC-（给编译命令理解，找错）" class="headerlink" title="2 GCC （给编译命令理解，找错）"></a>2 GCC （给编译命令理解，找错）</h2><p><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html">参考</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421094808293.png" alt="image-20210421094808293"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">gcc [<span class="string">options</span>][<span class="symbol">filenames</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>-E</li>
</ul>
<p>在正常的情况, GCC不会保留预处理阶段的输出文件，也即<code>.i</code>文件. 然而，可以利用<code>-E</code>选项保留预处理器的输出文件，以用于诊断代码</p>
<ul>
<li>-S</li>
</ul>
<p>通常情况下，GCC 把汇编语言输出存储到临时文件中，并且在汇编器执行完后立刻删除它们。但是可以使用<code>-S</code>选项，让编译程序在生成汇编语言输出之后立刻停止/</p>
<ul>
<li>-c</li>
</ul>
<p>执行预处理、编译、汇编而不链接</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421095114368.png" alt="image-20210421095114368"></p>
<ul>
<li>-o output_file 指定输出文件名</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc [-E|-S|-c] [infile] [-o outfile]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>-g 产生调试工具必需的符号信息</p>
</li>
<li><p>-O/On 在程序编译、链接过程中进行优化处理</p>
</li>
<li><p>-wall 显示所有的警告信息</p>
</li>
<li><p>-Idir 指定额外的头文件搜索路径</p>
</li>
<li><p>-Ldir 链接时搜索指定的库文件</p>
</li>
<li><p>-DMACRO[=DEFN]  定义MACRO宏</p>
</li>
</ul>
<h2 id="3-makefile"><a href="#3-makefile" class="headerlink" title="3 makefile"></a>3 makefile</h2><h3 id="规则结构"><a href="#规则结构" class="headerlink" title="规则结构"></a>规则结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425212401653.png" alt="image-20210425212401653"></p>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425212906626.png" alt="image-20210425212906626"></p>
<h1 id="Ch3-1-Linux-System-Programming-File-System"><a href="#Ch3-1-Linux-System-Programming-File-System" class="headerlink" title="Ch3-1 Linux System Programming - File System"></a>Ch3-1 Linux System Programming - File System</h1><h2 id="1-VFS"><a href="#1-VFS" class="headerlink" title="1 VFS"></a>1 VFS</h2><h3 id="1-1-Virtual-File-System-Switch-VFS"><a href="#1-1-Virtual-File-System-Switch-VFS" class="headerlink" title="1.1 Virtual File System Switch(VFS)"></a>1.1 Virtual File System Switch(VFS)</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421135942713.png" alt="image-20210421135942713"></p>
<h3 id="1-2-四个组成部分和各自的作用"><a href="#1-2-四个组成部分和各自的作用" class="headerlink" title="1.2 四个组成部分和各自的作用*"></a>1.2 四个组成部分和各自的作用*</h3><ul>
<li><strong>super block 超级块对象</strong></li>
</ul>
<p>存放已安装文件系统的有关信息。对基于磁盘的文件系统，这类对象通常对应于存放在磁盘上的文件系统控制块</p>
<ul>
<li><strong>i-ndoe object 索引节点对象</strong></li>
</ul>
<p>存放关于具体文件的一般信息。对基于磁盘的文件系统，这类对象通常对应于在磁盘上的文件控制块(file control block）。每个索引节点对象都有一个索引节点号，这个节点号唯一地标识文件系统中的文件。</p>
<p>p.s</p>
<p><em>inode由两个主要部分组成</em>：</p>
<ol>
<li>描述文件状态的元数据，文件元数据包括文件大小，权限，类型，时间；</li>
<li>文件数据描述，则用来定义文件数据在磁盘上的存放位置。</li>
</ol>
<ul>
<li><strong>File object 文件对象</strong></li>
</ul>
<p>存放打开文件与进程之间进行交互的有关信息。<em>这类信息仅当进程访问文件期间在于内核内存中</em>。</p>
<p>p.s</p>
<p>文件对象是否对应磁盘文件？不对应，索引节点对应。</p>
<ul>
<li><strong>Dentry object 目录项对象</strong></li>
</ul>
<p>存放目录项（也就是文件的特定名称）与对应文件进行链接的有关信息。每个磁盘文件系统都以自己特有的方式将该类信息存在磁盘上。底层文件系统的许多操作严重依赖文件的inode，在进行文件操作前，我们需要根据路径名找到文件对应的inode。我们知道文件系统是树状结构的，因此需要从根目录通过目录树找到要操作的文件或目录，这个遍历过程涉及到磁盘操作，非常耗时。根据局部性原理，很有必要把这个查找过程cache起来，dentry就是为了加快目录遍历操作引入的数据结构。</p>
<p>p.s 加深理解</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421141310272.png" alt="image-20210421141310272"></p>
<p>三个不同进程已经打开同一个文件，其中两个进程使用同一个硬链接（我觉得是打开同一路径名文件）。在这种情况下，其中的每个进程都使用自己的文件对象，但只需要两个目录项对象，每个硬链接对应一个目录项对象。这两个目录项对象指向同一个索引节点对象，该索引节点对象标识超级块对象，以及随后的普通磁盘文件。</p>
<h2 id="2-软链接和硬链接"><a href="#2-软链接和硬链接" class="headerlink" title="2 软链接和硬链接"></a>2 软链接和硬链接</h2><ul>
<li>Hard link<ul>
<li>不同文件名对应同一个inode</li>
<li>不能跨越文件系统</li>
<li>对应系统调用link</li>
</ul>
</li>
<li>Symbolic link<ul>
<li>存储被链接文件的文件名(而不是inode)实现链接</li>
<li>可跨越文件系统</li>
<li>对应系统调用symlink</li>
</ul>
</li>
<li>在shell中</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ln</span> –<span class="selector-tag">s</span> <span class="selector-attr">[文件名]</span> <span class="selector-attr">[文件名]</span> 创建软连接</span><br><span class="line"><span class="selector-tag">ls</span> <span class="selector-attr">[文件名]</span> <span class="selector-attr">[文件名]</span> 创建硬链接</span><br></pre></td></tr></table></figure>

<ul>
<li>在应用程序中</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">link</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *oldpath, <span class="keyword">const</span> <span class="keyword">char</span> *newpath)</span></span>;</span><br><span class="line"><span class="comment">//(Return: 0 if success; -1 if failure)</span></span><br><span class="line">创建软链接：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">symlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *oldpath, <span class="keyword">const</span> <span class="keyword">char</span> *newpath)</span></span>;</span><br><span class="line"><span class="comment">//(Return: 0 if success; -1 if failure)</span></span><br></pre></td></tr></table></figure>



<h2 id="3-系统调用"><a href="#3-系统调用" class="headerlink" title="3 系统调用"></a>3 系统调用</h2><p>Linux内核的对外接口; 用户程序和内核之间唯一的 接口; 提供最小接口</p>
<h3 id="3-1-File-descriptor-文件描述符"><a href="#3-1-File-descriptor-文件描述符" class="headerlink" title="3.1 File descriptor 文件描述符"></a>3.1 File descriptor 文件描述符</h3><p>Int fd (in &lt;unistd.h&gt;)    </p>
<p>‏STDIN_FILENO (0), STDOUT_FILENO (1), STDERR_FILENO (2)</p>
<h3 id="3-2-Basic-I-O-基本IO"><a href="#3-2-Basic-I-O-基本IO" class="headerlink" title="3.2 Basic I/O 基本IO"></a>3.2 Basic I/O 基本IO</h3><p>open-read/write-[lseek]-close</p>
<h4 id="3-2-1-open-create-close-read-write-lseek"><a href="#3-2-1-open-create-close-read-write-lseek" class="headerlink" title="3.2.1 open/create,close,read,write,lseek"></a>3.2.1 open/create,close,read,write,lseek</h4><h5 id="open-amp-create"><a href="#open-amp-create" class="headerlink" title="open&amp;create"></a>open&amp;create</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">creat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">mode_t</span> mode)</span></span>; </span><br><span class="line"></span><br><span class="line">(Return: a <span class="keyword">new</span> file descriptor <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure</span><br></pre></td></tr></table></figure>

<p><strong>Flags</strong>: </p>
<p>主标志（互斥）：O_RDONLY, O_WRONLY or O_RDWR</p>
<p>副标准：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421162938561.png" alt="image-20210421162938561"></p>
<p>（create =O_CREAT|O_WRONLY|O_TRUNC)</p>
<p><strong>mode</strong> 创建文件时指定权限</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421164150810.png" alt="image-20210421164150810"></p>
<h5 id="close"><a href="#close" class="headerlink" title="close"></a>close</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line">(Return: <span class="number">0</span> <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure）</span><br></pre></td></tr></table></figure>

<h5 id="read-write"><a href="#read-write" class="headerlink" title="read/write"></a>read/write</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"><span class="comment">//返回值: 读到的字节数，若已到文件尾为0，若出错为-1)</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"><span class="comment">//返回值: 若成功为已写的字节数，若出错为-1</span></span><br></pre></td></tr></table></figure>

<p>example</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ((n = read(STDIN_FILENO, buf, BUFSIZE)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (write(STDOUT_FILENO, buf, n) != n)&#123;</span><br><span class="line">    err_sys(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">  &#125; 	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">0</span></span><br><span class="line">  err_sys(<span class="string">&quot;read error&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="lseek"><a href="#lseek" class="headerlink" title="lseek"></a>lseek</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">off_t</span> <span class="title">lseek</span><span class="params">(<span class="keyword">int</span> fildes, <span class="keyword">off_t</span> offset, <span class="keyword">int</span> whence)</span></span>;</span><br><span class="line"></span><br><span class="line">(Return: the resulting offset location <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure>

<p><strong>whence:</strong></p>
<p>1.SEEK_SET</p>
<p>如果offset为0，则读写位置移动到开头。如果不为0，则读写位置在当前位置基础上向前移动offset个字节</p>
<p>2.SEEK_CUR</p>
<p>将读写位置移动到当前位置后再增加offset个字节</p>
<p>3.SEEK_END</p>
<p>将读写位置移动到文件结尾后再增加offset个字节</p>
<p>example</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fd;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">        fd = open(<span class="string">&quot;write.test&quot;</span>,O_RDWR|O_APPEND); <span class="comment">//追加可 读写方式打开了一个文件</span></span><br><span class="line">        <span class="keyword">size_t</span> x = write(fd,<span class="string">&quot;my name is hello \n&quot;</span>,<span class="number">20</span>)  <span class="comment">//写入20个字符串</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;you have writed %d words to the buffer and off is %d\n&quot;</span>,x,fd);</span><br><span class="line">        <span class="comment">//close(fd); //此时close，则后续的lseek都返回 -1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果此时不进行lseek，则后续read读出的buf是空的。lseek此时使用`SEEK_SET`的`whence`，即跳到文件开头进行偏移</span></span><br><span class="line">        <span class="keyword">off_t</span> k = lseek(fd,<span class="number">10</span>,SEEK_SET); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The file offset is %d\n&quot;</span>,k);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">size_t</span> t = read(fd,buf,<span class="number">20</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;you have read %d words and %s content\n&quot;</span>,t,buf);</span><br><span class="line">        </span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">you have writed <span class="number">20</span> words to the buffer <span class="keyword">and</span> off is <span class="number">3</span></span><br><span class="line">The file offset is <span class="number">10</span> <span class="comment">//向前移动10个字符，最后读出的内容是 “hello \n”</span></span><br><span class="line">you have read <span class="number">10</span> words <span class="keyword">and</span>  hello </span><br><span class="line"> content</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-dup-dup2"><a href="#3-2-2-dup-dup2" class="headerlink" title="3.2.2 dup,dup2"></a>3.2.2 dup,dup2</h4><p>复制一个文件描述符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> oldfd)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> oldfd, <span class="keyword">int</span> newfd)</span></span>; </span><br><span class="line">(Return: the <span class="keyword">new</span> file descriptor <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure>

<p>dup()函数返回的新的文件描述符是当前可用文件描述符中最小数值 ;</p>
<p>dup2()与dup()的区别在于可以用newfd来指定新描述符数值，若newfd指向的文件已经被打开，会先将其关闭。若newfd等于oldfd，就不关闭newfd，newfd和oldfd共同指向一份文件。</p>
<h4 id="3-2-3-fcntl"><a href="#3-2-3-fcntl" class="headerlink" title="3.2.3 fcntl"></a>3.2.3 fcntl</h4><p>根据文件描述词来操作文件的特性。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, <span class="keyword">long</span> arg)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, struct flock *lock)</span></span>; </span><br><span class="line">(返回值: 若成功则依赖于cmd,若出错为<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<p><strong>cmd:</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421173307899.png" alt="image-20210421173307899"></p>
<h3 id="3-3-Advanced-System-calls"><a href="#3-3-Advanced-System-calls" class="headerlink" title="3.3 Advanced System calls"></a>3.3 Advanced System calls</h3><h4 id="3-3-1-针对file-attributes"><a href="#3-3-1-针对file-attributes" class="headerlink" title="3.3.1 针对file attributes"></a>3.3.1 针对file attributes</h4><h5 id="stat-fstat-lstat"><a href="#stat-fstat-lstat" class="headerlink" title="stat/fstat/lstat"></a>stat/fstat/lstat</h5><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425192830069.png" alt="image-20210425192830069"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425194421156.png" alt="image-20210425194421156"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(S_ISDIR(statbuf.st_mode))&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, struct stat *buf)</span></span>; <span class="function"><span class="keyword">int</span> <span class="title">fstat</span><span class="params">(<span class="keyword">int</span> filedes, struct stat *buf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lstat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file_name, struct stat *buf)</span></span>; </span><br><span class="line"></span><br><span class="line">(Return: <span class="number">0</span> <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure#</span><br></pre></td></tr></table></figure>

<p>state与fstat的区别在于，stat()用文件名来指定要查询的文件，而fstat()用文件描述符来指定目标文件；</p>
<p>而stat()与lstat()的区别在于，如果指定的文件是一个符号链接，那么stat会解引用，查询该链接指向的普通文件的属性，而lstat()在遇到符号链接文件是，不去解引用，而是直接返回这个符号链接文件本身的属性。</p>
<p>要成功获取到指定文件的状态信息，需要用户对文件存储位置的每一层目录都具有执行和读取权限。</p>
<h5 id="access"><a href="#access" class="headerlink" title="access"></a>access</h5><p>按实际用户ID和实际组ID测试文件存取权限</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> mode)</span></span>; (Return: <span class="number">0</span> <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure>

<p>mode:<br>R_OK   测试读许可权<br>W_OK   测试写许可权<br>X_OK   测试执行许可权<br>F_OK   测试文件是否存在</p>
<h5 id="chmod-fchmod"><a href="#chmod-fchmod" class="headerlink" title="chmod/fchmod"></a>chmod/fchmod</h5><p>更改文件权限</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chmod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fchmod</span><span class="params">(<span class="keyword">int</span> fildes, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line">(Return: <span class="number">0</span> <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure#</span><br></pre></td></tr></table></figure>

<h5 id="chown-fchown-lchown"><a href="#chown-fchown-lchown" class="headerlink" title="chown/fchown/lchown"></a>chown/fchown/lchown</h5><p>更改文件拥有者</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chown</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">uid_t</span> owner, <span class="keyword">gid_t</span> group)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fchown</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">uid_t</span> owner, <span class="keyword">gid_t</span> group)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lchown</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">uid_t</span> owner, <span class="keyword">gid_t</span> group)</span></span>;</span><br><span class="line"></span><br><span class="line">(Return: <span class="number">0</span> <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure>

<h5 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h5><p>为进程设置文件存取权限屏蔽字，并返回以前的值</p>
<p>//TODO</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">mode_t</span> <span class="title">umask</span><span class="params">(<span class="keyword">mode_t</span> mask)</span></span>;</span><br></pre></td></tr></table></figure>

<h5 id="link-unlink"><a href="#link-unlink" class="headerlink" title="link/unlink"></a>link/unlink</h5><p>创建/删除硬链接</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421181727280.png" alt="image-20210421181727280"></p>
<h5 id="symlink-readlink"><a href="#symlink-readlink" class="headerlink" title="symlink/readlink"></a>symlink/readlink</h5><p>创建/读取</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421181804331.png" alt="image-20210421181804331"></p>
<h4 id="3-3-2-针对-directory"><a href="#3-3-2-针对-directory" class="headerlink" title="3.3.2 针对 directory"></a>3.3.2 针对 directory</h4><h5 id="mkdir-rmdir"><a href="#mkdir-rmdir" class="headerlink" title="mkdir/rmdir"></a>mkdir/rmdir</h5><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421181840737.png" alt="image-20210421181840737"></p>
<h5 id="chdir-fchdir"><a href="#chdir-fchdir" class="headerlink" title="chdir/fchdir"></a>chdir/fchdir</h5><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421181912966.png" alt="image-20210421181912966"></p>
<h5 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd"></a>getcwd</h5><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421181943734.png" alt="image-20210421181943734"></p>
<h5 id="read-directory"><a href="#read-directory" class="headerlink" title="read directory"></a>read directory</h5><ul>
<li>Data structures<ul>
<li>DIR</li>
<li>Struct dirent</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line">DIR *fd; <span class="comment">// 定义文件夹类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">fp</span>;</span><span class="comment">// 文件夹返回值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">states</span>;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421182116257.png" alt="image-20210421182116257"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421182126779.png" alt="image-20210421182126779"></p>
<h3 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h3><p>（<a href="https://github.com/NJU-SE-15-share-review/professional-class/blob/master/Linux%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/Linux%E5%A4%8D%E4%B9%A0.pdf">截图自</a>）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425212609395.png" alt="image-20210425212609395"></p>
<h2 id="4-C库"><a href="#4-C库" class="headerlink" title="4 C库"></a>4 C库</h2><p>依赖于系统调用; 提供较复杂功能</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425214057984.png" alt="image-20210425214057984"></p>
<h2 id="5-权限"><a href="#5-权限" class="headerlink" title="5 权限"></a>5 权限</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421180045812.png" alt="image-20210421180045812"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421175900649.png" alt="image-20210421175900649"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421175910123.png" alt="image-20210421175910123"></p>
<h2 id="6-文件锁"><a href="#6-文件锁" class="headerlink" title="6 文件锁"></a>6 文件锁</h2><ul>
<li>记录锁</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421184041051.png" alt="image-20210421184041051"></p>
<p>首先使用cmd:F_GETLK 把flock结构体放进去，如果flock结构体的type变成F_UNLCK则说明可以加锁</p>
<p>接着cmd: F_SETLK</p>
<p>flock：F_RDLCK\F_WRLCK\F_UNLCK</p>
<ul>
<li>劝告锁<ul>
<li>检查，加锁由应用程序自己控制</li>
</ul>
</li>
<li>强制锁<ul>
<li>检查，加锁由内核控制</li>
<li>影响 open\read\write 等</li>
</ul>
</li>
<li>共享锁</li>
<li>排他锁</li>
</ul>
<p>p.s</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421184804193.png" alt="image-20210421184804193"></p>
<h1 id="Ch4-Kernel-Driver"><a href="#Ch4-Kernel-Driver" class="headerlink" title="Ch4 Kernel Driver"></a>Ch4 Kernel Driver</h1><h2 id="1-内核的概念"><a href="#1-内核的概念" class="headerlink" title="1 内核的概念"></a>1 内核的概念</h2><p>操作系统是一系列程序的集合，其中最重要的部分构成了内核</p>
<p>内核分为单内核和微内核。单内核是一个很大的进程，内部可以分为若干模块，运行时是一个独立的二进制文件，模块间通讯通过直接调用函数实现。微内核中大部分内核作为独立的进程在特权下运行，通过消息传递进行通讯。</p>
<h2 id="2-初始化程序的建立"><a href="#2-初始化程序的建立" class="headerlink" title="2 初始化程序的建立"></a>2 初始化程序的建立</h2><ul>
<li>initrd是什么意思</li>
</ul>
<p>initrd的解释是initialized RAM disk，就是启动的时候由uboot来初始化内存，当做disk来使用。在uboot启动的时候，uboot会将存储介质中（如Flash）的initrd文件加载到内存，内核启动时会在访问挂载的根文件系统前先访问该内存中的initrd文件系统。在uboot配置了initrd的情况下，文件系统启动被分成两个阶段，第一阶段先执行initrd文件系统中的”某个可执行文件”，完成加载驱动模块等任务。第二阶段是挂载真正的根文件系统中，然后执行/sbin/init进程。</p>
<h2 id="3-驱动的模块-ko"><a href="#3-驱动的模块-ko" class="headerlink" title="3 驱动的模块 .ko"></a>3 驱动的模块 .ko</h2><ul>
<li>许多常见驱动的源代码集成在内核源码里</li>
<li>也有第三方开发的驱动，可以单独编译成模块.ko</li>
<li>编译需要内核头文件的支持</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421190322499.png" alt="image-20210421190322499"></p>
<ul>
<li>insmod</li>
<li>rmmod</li>
</ul>
<p>Linux insmod（英文全拼：install module）命令用于载入模块。</p>
<p>Linux有许多功能是通过模块的方式，在需要时才载入kernel。如此可使kernel较为精简，进而提高效率，以及保有较大的弹性。这类可载入的模块，通常是设备驱动程序。</p>
<p>执行 rmmod 指令，可删除不需要的模块。Linux 操作系统的核心具有模块化的特性，应此在编译核心时，务须把全部的功能都放如核心。你可以将这些功能编译成一个个单独的模块，待有需要时再分别载入它们。</p>
<ul>
<li>modprobe</li>
<li>modprobe -r</li>
</ul>
<p>Linux modprobe命令用于自动处理可载入模块。</p>
<p>modprobe可载入指定的个别模块，或是载入一组相依的模块。modprobe会根据depmod所产生的相依关系，决定要载入哪些模块。若在载入过程中发生错误，在modprobe会卸载整组的模块。</p>
<p>-r或–remove 　模块闲置不用时，即自动卸载模块。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421190816356.png" alt="image-20210421190816356"></p>
<h2 id="4-内核模块和应用程序的区别"><a href="#4-内核模块和应用程序的区别" class="headerlink" title="4 内核模块和应用程序的区别"></a>4 内核模块和应用程序的区别</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421161655180.png" alt="image-20210421161655180"></p>
<ul>
<li>不能用c库开发驱动程序</li>
<li>没有内存保护机制</li>
<li>小内核栈</li>
<li>并发上的考虑</li>
</ul>
<h2 id="5-LED-example"><a href="#5-LED-example" class="headerlink" title="5 LED example"></a>5 LED example</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213732082.png" alt="image-20210425213732082"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213313501.png" alt="image-20210425213313501"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213324731.png" alt="image-20210425213324731"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213348186.png" alt="image-20210425213348186"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213357325.png" alt="image-20210425213357325"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213407526.png" alt="image-20210425213407526"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213423147.png" alt="image-20210425213423147"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213433696.png" alt="image-20210425213433696"></p>
<h2 id="6-字符型驱动的概念"><a href="#6-字符型驱动的概念" class="headerlink" title="6 字符型驱动的概念"></a>6 字符型驱动的概念</h2><p>在Linux设备驱动程序的家族中，字符设备驱动程序是较为简单的驱动程序， 同时也是应用非常广泛的驱动程序。 所以学习字符设备驱动程序，对构建 Linux设备驱劢程序的知识结构非常的 重要。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425213231106.png" alt="image-20210425213231106"></p>
<h1 id="Final-华为企业课（openEuler操作系统）-15‘"><a href="#Final-华为企业课（openEuler操作系统）-15‘" class="headerlink" title="Final 华为企业课（openEuler操作系统） 15‘"></a>Final 华为企业课（openEuler操作系统） 15‘</h1><h2 id="openEuler出现的背景"><a href="#openEuler出现的背景" class="headerlink" title="openEuler出现的背景"></a>openEuler出现的背景</h2><p>为推动鲲鹏生态的发展，繁荣国内和全球的计算产业， 2019 年底 EulerOS 被正式推 送开源社区，命名为 openEuler</p>
<h2 id="openEuler是什么"><a href="#openEuler是什么" class="headerlink" title="openEuler是什么"></a>openEuler是什么</h2><ul>
<li><p>openEuler 是一个开源、免费的 Linux 发行平台； </p>
</li>
<li><p>支持 x86 、 ARM 、 RISC-V 等多种处理器架构；</p>
</li>
<li><p>所有开发者、企业、商业组织都可以使用 openEuler 社区版本，也可以基于社区版本 发布自己二次开发的操作系统版本。</p>
</li>
</ul>
<h2 id="毕昇JDK"><a href="#毕昇JDK" class="headerlink" title="毕昇JDK"></a>毕昇JDK</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425190703093.png" alt="image-20210425190703093"></p>
<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210423142242169.png" alt="image-20210423142242169"></p>
<h2 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210423142419445.png" alt="image-20210423142419445"></p>
<p>是增强而不是只支持两种</p>
<h2 id="openEuler内存页"><a href="#openEuler内存页" class="headerlink" title="openEuler内存页"></a>openEuler内存页</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210423142547232.png" alt="image-20210423142547232"></p>
<p>8B是关键；</p>
<h2 id="鲲鹏处理器简介"><a href="#鲲鹏处理器简介" class="headerlink" title="鲲鹏处理器简介"></a>鲲鹏处理器简介</h2><p>芯片是硅；鲲鹏单片支持64核</p>
<p><strong>鲲鹏处理器是基于 ARMv8-64 位 RISC 指令集开发的通用处理器</strong></p>
<h3 id="计算子系统"><a href="#计算子系统" class="headerlink" title="计算子系统"></a>计算子系统</h3><p>使用大量寄存器：通用X0-X30 （31个，64位）+ 特殊寄存器 + 系统寄存器</p>
<h2 id="openEuler的增强"><a href="#openEuler的增强" class="headerlink" title="openEuler的增强"></a>openEuler的增强</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210423144616488.png" alt="image-20210423144616488"></p>
<p>为了充分发挥鲲鹏处理器的优势， openEuler在<strong>多核调用技术</strong>、<strong>软硬件协同</strong>、<strong>轻量级虚拟化</strong>、<strong>指令级优化</strong>和<strong>智能优化引擎</strong>等方面做了增强。</p>
<h3 id="NUMA-aware-Qspinlock"><a href="#NUMA-aware-Qspinlock" class="headerlink" title="NUMA-aware Qspinlock"></a>NUMA-aware Qspinlock</h3><p>openEuler 提供“ NUMA 感知队列自旋锁”实现互斥机制以减小 MUMA 体系结构中使 用自旋锁的开销。</p>
<h3 id="鲲鹏加速引擎"><a href="#鲲鹏加速引擎" class="headerlink" title="鲲鹏加速引擎"></a>鲲鹏加速引擎</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210423151657639.png" alt="image-20210423151657639"></p>
]]></content>
      <categories>
        <category>NJUSE课程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>NJUSE</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库开发-复习背诵</title>
    <url>/2021/04/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91-%E5%A4%8D%E4%B9%A0%E8%83%8C%E8%AF%B5/</url>
    <content><![CDATA[<h1 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h1><h2 id="1-1-B-树索引的结构和使用方式"><a href="#1-1-B-树索引的结构和使用方式" class="headerlink" title="1.1 B+树索引的结构和使用方式"></a>1.1 B+树索引的结构和使用方式</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422122243811.png" alt="image-20210422122243811"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422122308673.png" alt="image-20210422122308673"></p>
<h2 id="1-2-B-索引能做什么不能做什么以及为什么"><a href="#1-2-B-索引能做什么不能做什么以及为什么" class="headerlink" title="1.2 B+索引能做什么不能做什么以及为什么"></a>1.2 B+索引能做什么不能做什么以及为什么</h2><ul>
<li>能做的<ul>
<li>全键值 where x=123</li>
<li>键值范围 where 45&lt;x&lt;123</li>
<li>键前缀查找 where x like “j%”</li>
</ul>
</li>
<li>不能做什么<ul>
<li>如果不是按照索引最左列开始寻找，就无法使用索引<ul>
<li>无法查找名字为bill，也无法查找特定生日</li>
</ul>
</li>
<li>不能跳过索引中的列<ul>
<li>无法查找姓Smith并且在某一特定日期出生的</li>
</ul>
</li>
<li>如果查询中有某个列的范围查询，则其右边的所有列都无法使用索引</li>
</ul>
</li>
</ul>
<h2 id="1-3-何时该使用B树索引并分别说明原因"><a href="#1-3-何时该使用B树索引并分别说明原因" class="headerlink" title="1.3 何时该使用B树索引并分别说明原因"></a>1.3 何时该使用B树索引并分别说明原因</h2><ul>
<li><p>考虑检索比例 （但不一定）</p>
</li>
<li><p>仅需要通过索引访问基本表的很少一部分行（必要条件）</p>
</li>
<li><p>如果要处理表中的多行，可以使用索引而不使用表（复合键的索引）=&gt;所有的结果都在索引中间</p>
<ul>
<li>index(x,y) select x,y from T where x</li>
</ul>
</li>
</ul>
<h2 id="1-4-为什么系统的外键构建索引是普遍要求；有没有例外的情况，说明理由"><a href="#1-4-为什么系统的外键构建索引是普遍要求；有没有例外的情况，说明理由" class="headerlink" title="1.4 为什么系统的外键构建索引是普遍要求；有没有例外的情况，说明理由"></a>1.4 为什么系统的外键构建索引是普遍要求；有没有例外的情况，说明理由</h2><ul>
<li>对数据进行并发更新的时候，外键加索引尤为必要，以避免加锁的时间过长</li>
<li>主从结构的表，A表的外键参照了B表的主键，所以两个表需要同时修改</li>
<li>事务型数据库的被参照表常常是只读的，例如字典和查找表很少修改，这是是否为外键增加索引的判断标准是增加索引是否能为性能带来好处（刘嘉举例代码表不经常更新）</li>
<li>对外键构建索引可能会导致同一个字段，多个索引的问题（为每一个外键建立索引，可能会造成多余的索引）：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422133115927.png" alt="image-20210422133115927"></p>
<p>Order_Detail的主键是复合键(Order_id,article_id)，所以当订单录入的时候回为表Order_deatils的外键增加索引。但是Order_details作为复合键索引的第一个字段，无需再增加索引。（反之如果article_id是第一个字段则article_id不需要增加索引）</p>
<h2 id="1-5-思考题"><a href="#1-5-思考题" class="headerlink" title="1.5 思考题"></a>1.5 思考题</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210421202233936.png" alt="image-20210421202233936"></p>
<ul>
<li>MyISAM使用前缀压缩来缩小索引，从而让更多的索引能够放入内存中达到快速索引的目的，但是索引这样组织会在某些操作时导致性能降低，因为每个值的压缩前缀都依前面的值</li>
<li>InnoDB的数据文件本身就是索引文件；而MyISAM索引文件和数据文件是分离的。所以不建议InnoDB使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大</li>
</ul>
<h2 id="1-6-系统生成键"><a href="#1-6-系统生成键" class="headerlink" title="1.6 系统生成键"></a>1.6 系统生成键</h2><p><strong>问题描述</strong></p>
<ul>
<li>系统生产序列号，远好于寻找当前最大值并加一或用一个专门的表存下一个值并且加锁更新</li>
<li>但是如果插入操作并发性过高，在主键索引的创建操作上就会产生非常严重的资源竞争（因为当生成器数量只有一个的时候会产生大量相近的序列号争用同一个索引页）</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>反向索引/逆向索引</li>
</ul>
<p>保存索引之前先将组成键的bit序列进行逆向排序</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422170516846.png" alt="image-20210422170516846"></p>
<p>把MASSENA(ANESSAM)，于是插入时会找到索引中的不同位置，资源竞争会比使用常规索引要少</p>
<ul>
<li>哈希索引</li>
</ul>
<p>根据索引字段的值，将实际键转换为一个随机数值键。访问某一个键值非常快，但是不支持通配符查询、范围查询等</p>
<h1 id="二、SQL查询优化"><a href="#二、SQL查询优化" class="headerlink" title="二、SQL查询优化"></a>二、SQL查询优化</h1><h2 id="2-1-SQL执行顺序"><a href="#2-1-SQL执行顺序" class="headerlink" title="2.1 SQL执行顺序"></a>2.1 SQL执行顺序</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422171643281.png" alt="image-20210422171643281"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/%E6%9F%90%E9%81%93%E9%A2%98%E7%9A%84%E7%AD%94%E6%A1%88.png"></p>
<ul>
<li>软解析与硬解析</li>
</ul>
<p>软：对一条sql，利用hash算法获取其hash值，然后在library cache中查询，如果hash存在，再比较sql和cache中的sql，如果“相同”（带绑定变量），就利用已有的解析树和执行计划，省略优化器相关工作，这个过程就是软解析。</p>
<p>硬：如果上面两个比较有一个不等，那么优化器都将进行创建解析树、生成执行计划（或者叫执行序列），这个过程就是硬解析</p>
<p>硬解析开销昂贵，应当极力避免。因此开发人员对功能相同的代码要努力保持代码的一致性（这就是提倡在程序中多使用绑定变量的原因）</p>
<h2 id="2-2-对过滤条件进行优化"><a href="#2-2-对过滤条件进行优化" class="headerlink" title="2.2 对过滤条件进行优化"></a>2.2 对过滤条件进行优化</h2><p>假设四个表：customers\orders\orderdetail\articles</p>
<p>找出近6个月住在xx市、且订购了yy车的所有用户</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422175627161.png" alt="image-20210422175627161"></p>
<h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422180040069.png" alt="image-20210422180040069"></p>
<p>可以在join order表的时候先过滤掉日期</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422180055594.png" alt="image-20210422180055594"></p>
<p>数据处理顺序无足轻重，customers表最为重要，因为所有最终数据都来自这个表，其他的表起辅助作用</p>
<h3 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h3><p>发现重复数据容易，但是发现数据不准确很难，所以要避免在最高层使用distinct（比如在第一版中可能存在重名用户）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422180602245.png" alt="image-20210422180602245"></p>
<p>第二版中，customers表是查询结果的唯一来源；</p>
<p>内层子查询是<em>关联子查询</em>，缺点是无法在确定当前客户之前执行，优化器不改写的话会先找出每个用户再逐一进行存在性测试</p>
<p>如果使用非关联子查询：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422181228134.png" alt="image-20210422181228134"></p>
<p>这里内层查询不再依赖外层查询，只需要执行一次；注意有无索引的差别；</p>
<p>in执行了隐式的distinct；但是为了一致性，应该在子查询和主查询应用相同的规则</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422182406298.png" alt="image-20210422182406298"></p>
<p><strong>当对大量记录做存在性检查时，选择exists和in需要斟酌</strong></p>
<p>IN适合于外表大而内表小的情况；EXISTS适合于外表小而内表大的情况。IN是不走索引的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422183054581.png" alt="image-20210422183054581"></p>
<p>这里取决于日期和商品条件的有效性：</p>
<ul>
<li>过去六个月生意好的情况下，商品名称是最有效的过滤条件，因此子查询中使用in更好（先找出所有的BMW再查找是否是在最近六个月会更快）</li>
<li>如果article表的artid字段有索引这个方法会更快</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>找到分辨率最强的条件（箭头大小对应分辨率大小）</p>
<p>1.城市人少但是过去六个月销售业绩不错，卖出去了很多车</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422183836050.png" alt="image-20210422183836050"></p>
<p>2.城市人多但是很少有人买BMW</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210428090256938.png" alt="image-20210428090256938"></p>
<h3 id="大数据量的查询"><a href="#大数据量的查询" class="headerlink" title="大数据量的查询"></a>大数据量的查询</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422185318495.png" alt="image-20210422185318495"></p>
<h2 id="2-3-减少表连接的数量"><a href="#2-3-减少表连接的数量" class="headerlink" title="2.3 减少表连接的数量"></a>2.3 减少表连接的数量</h2><h3 id="改写sql"><a href="#改写sql" class="headerlink" title="改写sql"></a>改写sql</h3><p>再回头看订单和客户的例子：</p>
<p>列出所有尚未记录为完成状态的订单的下列字段：订单号、客户名、订单的最后状态、设置状态的时间</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422190033609.png" alt="image-20210422190033609"></p>
<p>两个子查询访问的表在外层已经被访问过，os表遍历3遍是5表连接。</p>
<p>目前两个子查询是关联子查询，尝试把它变成非关联子查询</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422190507597.png" alt="image-20210422190507597"></p>
<p>这个子查询会对orderstatus做全扫描。为了让优化器明白我们要“先获得子查询的结果，然后再连接orders和orderstatus”</p>
<p>略作修改，一开始就指定（os.xx,os.yy）来自相同的表：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422191036426.png" alt="image-20210422191036426"></p>
<p>将非关联子查询变成内嵌实图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422191419380.png" alt="image-20210422191419380"></p>
<p>实际上不需要再用子查询，因为内嵌视图已经找到了最后的状态，我们只要“检查已知的最新状态“就可以：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210422191740119.png" alt="image-20210422191740119"></p>
<h3 id="设计的方式-（反范式模式）"><a href="#设计的方式-（反范式模式）" class="headerlink" title="设计的方式 （反范式模式）"></a>设计的方式 （反范式模式）</h3><ul>
<li>什么是逆范式<ul>
<li>对关系模式的细化，使被修改表的规范化程度小于至少一个原始表的规范化程度。</li>
<li>还可以使用更宽松的术语来指将两个表合并为一个新表的情况，新表仍然是规范化的，但比原来的表包含更多的空值。</li>
</ul>
</li>
<li>使用逆范式的条件</li>
</ul>
<p>有些时候一昧的追求范式减少冗余，反而会降低数据读写的效率，这个时候就要反范式，<strong>引入可控制的冗余</strong>，利用空间来换时间。</p>
<ol>
<li><strong>组合1:1对应关系</strong></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425165127019.png" alt="image-20210425165127019"></p>
<ol start="2">
<li>*<em>在1:<em>关系中复制非键列以减少连接</em></em></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425165514186.png" alt="image-20210425165514186"></p>
<p>一般价格会在多表都有；</p>
<p>对不改变的数据不用范式；</p>
<ol start="3">
<li>*<em>复制1:<em>关系中的FK列以减少连接</em></em></li>
</ol>
<p>ABC单向连接的情况：需要构建实体关系模型来发现</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425165915608.png" alt="image-20210425165915608"></p>
<ol start="4">
<li><strong>复制 *:*关系中的列以减少连接</strong></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425165942205.png" alt="image-20210425165942205"></p>
<ol start="5">
<li>引入重复组</li>
<li>创建抽取表</li>
<li>分表</li>
</ol>
<h1 id="三、数据库的事务隔离级别"><a href="#三、数据库的事务隔离级别" class="headerlink" title="三、数据库的事务隔离级别"></a>三、数据库的事务隔离级别</h1><p><a href="http://www.cyc2018.xyz/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.html#mysql-%E9%9A%90%E5%BC%8F%E4%B8%8E%E6%98%BE%E5%BC%8F%E9%94%81%E5%AE%9A">参考</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425161048380.png" alt="image-20210425161048380"></p>
<ul>
<li>未提交读 Read uncommitted</li>
</ul>
<p>事务中的修改，即使没有提交，对其它事务也是可见的。</p>
<ul>
<li>提交读 Read committed</li>
</ul>
<p>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的</p>
<ul>
<li>可重复读 Repeatable Read</li>
</ul>
<p>保证在同一个事务中多次读取同一数据的结果是一样的</p>
<p>在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据。</p>
<ul>
<li>可串行化 Serializable</li>
</ul>
<p>强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行</p>
<ul>
<li>脏读 Dirty Read</li>
</ul>
<p>一个事务读到了另一个未提交事务修改过的数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425162407699.png" alt="image-20210425162407699"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425162416293.png" alt="image-20210425162416293"></p>
<ul>
<li>不可重复读 NonRepeatable Read</li>
</ul>
<p>不可重复读指的是在同一事务内，不同的时刻读到的同一批数据可能是不一样的</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425162944973.png" alt="image-20210425162944973"></p>
<ul>
<li>幻读 Phantom Read</li>
</ul>
<p>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210425163347641.png" alt="image-20210425163347641"></p>
<ul>
<li>mysql中的实现机制(mysql中可重复读可以防得住幻读)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210428090225730.png" alt="image-20210428090225730"></p>
<h1 id="四、资源竞争"><a href="#四、资源竞争" class="headerlink" title="四、资源竞争"></a>四、资源竞争</h1><ul>
<li>DBA解决方案<ul>
<li>事务空间<ul>
<li>表或索引由物理块组成，每个物理块中为事务条目预留了空间。DBA通过增加分配给事务条目的空间来缓解冲突</li>
<li>完整扫描和索引搜索必须访问更多的物理块</li>
</ul>
</li>
<li>可用列表<ul>
<li>insert操作分散到不同的物理块</li>
</ul>
</li>
</ul>
</li>
<li>架构解决方案<ul>
<li>分区</li>
<li>逆序索引</li>
<li>索引组织表（IOT）<ul>
<li>以索引的方式组织表，就少了一个竞争源</li>
</ul>
</li>
</ul>
</li>
<li>开发解决方案<ul>
<li>调节并发数</li>
<li><strong>不使用系统产生值</strong><ul>
<li>不一定需要连续的值作为代理键。在处理范围的情况下，连续值有用(结合”&gt;”,”between”等)，但是如果仅需要在其他表中作为外键的唯一ID。可以考虑使用随机数，遇到已经使用过的随机数就重新生成</li>
<li>随机数在大的range中，10倍数据量，是常用的</li>
<li>该不该用毫无意义的ID作为主键<ul>
<li>有意义的键：例如身份证号。键值是唯一的，而由人来指定是不可靠的，有可能会出现重复，虽然数据库可以检测出来，但是在数据进入系统之前不会被发现。所以有意义的键是不可靠的。<ul>
<li>路径是字符串 作为主键使得索引结构庞大，拆分耗时效率低</li>
</ul>
</li>
<li>无意义的键：本质是数据库构造的并不打算供人使用的一个随即数。对应小系统或稳定的情况，应优先考虑</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>随机数 窄的range 宽的range 10倍</p>
<p>该不该用毫无意义的id</p>
<p>流水号</p>
<p>两派 没有意义会带来什么 有意义会带来什么</p>
<p>路径是字符串会怎样 索引结构庞大 拆分比较效率低</p>
<h1 id="五、代码题"><a href="#五、代码题" class="headerlink" title="五、代码题"></a>五、代码题</h1><p>自求多福系列。</p>
<p>有一问简单累加；</p>
<p>第一题：索引的问题</p>
<p>第二题：索引相关，高并发的问题，自增字段问题</p>
<p>第三题：sql优化 exist in 过滤条件；降低表数量方式</p>
<p>第四题：事务隔离级别</p>
]]></content>
      <categories>
        <category>NJUSE课程</category>
      </categories>
      <tags>
        <tag>NJUSE</tag>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ServletStudy</title>
    <url>/2021/05/17/ServletStudy/</url>
    <content><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>
<ul>
<li><p>Servlet是sun公司开发动态web的一门技术，sun提供了一个Servlet接口</p>
<ul>
<li>编写一个类实现servlet接口</li>
<li>把开发好的类部署到web服务器上</li>
</ul>
</li>
<li><p>实现了servlet接口的java程序就可以被称作servlet</p>
</li>
</ul>
<h2 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h2><ul>
<li><p>IDEA-&gt;File-&gt;new-&gt;project直接用maven的一个webapp模版</p>
</li>
<li><p>/src/main/java/com/coolinsky/servlet/HelloServlet.java</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coolingsky.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        super.doGet(req, resp);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	在servlet从容器得到的响应对象中，可以有一个PrintWriter，使用这个PrintWriter能够将HTML文本输出到响应对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        PrintWriter writer=resp.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;hello servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        super.doPost(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>/src/main/webapp/WEB-INF/web.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.coolingsky.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>部署在tomcat服务器上</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210517230207551.png" alt="image-20210517230207551"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h4><p>如果一个web服务应用得到一个指向某个servlet的请求，此时服务器不是把这个请求交给servlet本身，而是交给部署该servlet的容器，由容器调用servlet方法，如doPost\doGet</p>
<h4 id="容器能提供什么"><a href="#容器能提供什么" class="headerlink" title="容器能提供什么"></a>容器能提供什么</h4><p>容器能够提供通信支持、生命周期管理、多线程支持、生命方式实现安全、JSP支持</p>
<h4 id="容器如何处理请求"><a href="#容器如何处理请求" class="headerlink" title="容器如何处理请求"></a>容器如何处理请求</h4><ol>
<li>用户点击一个链接，其URL指向一个servlet而不是静态页面</li>
<li>容器看出来这个请求要的是一个servlet，所以容器要创建两个对象<ol>
<li>HttpServletRespnese</li>
<li>HttpServletRequest</li>
</ol>
</li>
<li>容器根据URL找到正确的servlet，为这个请求创建或分配一个线程，并把请求和响应对象传递给这个servlet线程</li>
<li>容器调用servlet的service()方法。根据请求的不同类型，service()调用deGet或者doPost（下面假设是HTTP GET）</li>
<li>doGet生成动态页面，并把这个页面填入相应对象（容器还有响应对象的一个引用）</li>
<li>线程结束，容器把响应对象转换成一个HTTP响应，发回给客户，然后删除请求和响应对象</li>
</ol>
<h3 id="URL与servlet的映射"><a href="#URL与servlet的映射" class="headerlink" title="URL与servlet的映射"></a>URL与servlet的映射</h3><h4 id="一个servlet有3个名字"><a href="#一个servlet有3个名字" class="headerlink" title="一个servlet有3个名字"></a>一个servlet有3个名字</h4><ol>
<li><p>客户知道的URL名</p>
</li>
<li><p>部署人员知道的秘密的内部名</p>
</li>
<li><p>实际的文件名</p>
</li>
</ol>
<h4 id="使用部署描述文件（DD）将URL映射到servlet"><a href="#使用部署描述文件（DD）将URL映射到servlet" class="headerlink" title="使用部署描述文件（DD）将URL映射到servlet"></a>使用部署描述文件（DD）将URL映射到servlet</h4><ul>
<li>&lt;servlet&gt; 内部名映射到完全限定类名<ul>
<li>servlet元素告诉容器哪些文件属于一个特定web应用</li>
<li>servlet-name元素用于把一个servlet元素绑定到一个特定的servlet-mapping元素。最终用户看不到这个名字，这个名字只在这个部署描述文件中用到</li>
<li>servlet-class放置类的完全限定名（不加.class）</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.coolingsky.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;servlet-mapping&gt; 内部名映射到公共URL名<ul>
<li>可以理解为，当请求到来的时候，容器会在运行时使用这个元素访问“对于请求的这个URL，我应该调用哪个servlet”</li>
<li>url-pattern是客户看到并且使用的servlet名字，但是不是具体类的名字</li>
<li>url-pattern中可以使用通配符</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>web容器在启动的时候，它会为每个web程序都创建一个对应的servletContext对象，代表了当前的web应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>共享数据</p>
<ul>
<li>写一个servlet1在context中放数据</li>
<li>写一个servlet2在context中读取数据</li>
</ul>
</li>
<li><p>获取初始化参数</p>
<ul>
<li>在web.xml中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>namespace<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在servlet中读取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">context.getInitParameter(<span class="string">&quot;namespace&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求转发</p>
<ul>
<li>当前servlet: url1</li>
<li>访问/url1获得url2的内容（url不变，如果是重定向是变的）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">context.getRequestDispatcher(<span class="string">&quot;/url2&quot;</span>).forward(req,resp);</span><br><span class="line"><span class="comment">//这里的/代表web应用</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>读取资源文件</li>
</ul>
<ul>
<li><p>在properties中写一个db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>:<span class="string">coolingsky</span></span><br><span class="line"><span class="attr">password</span>:<span class="string">coolingsky</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>在servlet中读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    InputStream inputStream=context.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">    Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line">    properties.load(inputStream);</span><br><span class="line">    String name=properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String pwd=properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    resp.getWriter().println(name+<span class="string">&quot;:&quot;</span>+pwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问浏览器</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210518164838133.png" alt="image-20210518164838133"></p>
</li>
</ul>
<h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>文件下载的实质就是文件拷贝，将文件从服务器端拷贝到浏览器端。所以文件下载需 要IO技术将服务器端的文件使用InputStream读取到，再使用 ServletOutputStream写到response缓冲区中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取要下载的文件路径</span></span><br><span class="line">    String realPath=<span class="string">&quot;/Users/xuyuxuan/IdeaProjects/helloservlet/src/main/resources/hello.txt&quot;</span>;</span><br><span class="line">    <span class="comment">//2.获取下载的文件名</span></span><br><span class="line">    String fileName=realPath.substring(realPath.lastIndexOf(<span class="string">&#x27;/&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    <span class="comment">//3.让浏览器能够支持下载我们想要的东西，中文文件名用URLEncoder编码，否则可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+fileName);</span><br><span class="line">    <span class="comment">//4.获取下载文件的输入流</span></span><br><span class="line">    FileInputStream inputStream=<span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">//5.创建缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">//6.获取outputstream对象</span></span><br><span class="line">    ServletOutputStream servletOutputStream=resp.getOutputStream();</span><br><span class="line">    <span class="comment">//7.将fileoutputstream流写入到buffer缓冲区，使用outputstream将缓冲区中的数据输出到客户端</span></span><br><span class="line">    <span class="keyword">while</span> ((len=inputStream.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        servletOutputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>一个web资源B收到客户端A的请求后，B会通知A客户端去访问另一个web资源c</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/helloservlet_war/success.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/hello&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    username:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    password:&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>注意：web.xml默认版本好像不行，建议用更高的版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><p>获取前端的参数&amp;请求转发</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.bilibili.com/video/BV12J411M7Sj?p=9&amp;t=112">https://www.bilibili.com/video/BV12J411M7Sj?p=9&amp;t=112</a></p>
<p>[2] Head First Servlets and JSP</p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-1</title>
    <url>/2021/05/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1/</url>
    <content><![CDATA[<h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><p>一些常见的UML表示：<br><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210623200403.png"></p>
<p>java抽象类和接口的区别：</p>
<ol>
<li>抽象类不一定必须含有抽象方法</li>
<li>接口中的方法必须都是抽象方法</li>
<li>抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象</li>
</ol>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210531235140465.png" alt="image-20210531235140465"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210531235154023.png" alt="image-20210531235154023"></p>
<h1 id="策略模式-行为型模式"><a href="#策略模式-行为型模式" class="headerlink" title="策略模式-行为型模式"></a>策略模式-行为型模式</h1><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210605213309.png" alt="image-20210605213309729"></p>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul>
<li><p>找出应用中可能需要变化之处，把它们独立出来， 不要和那些不需要变化的代码混在一起。</p>
</li>
<li><p>针对接口编程， 而不是针对实现编程。（针对超类型 <em>supertype</em>编程）</p>
</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>补充：</p>
<p>在duck构造方法中通过set和get进一步设定FlyBehavior、QuackBehavior</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">  FlyBehavior flyBehavior; </span><br><span class="line">  QuackBehavior quackBehavior; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span> </span>&#123; &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flyBehavior.fly(); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    quackBehavior.quack(); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(“All ducks <span class="keyword">float</span>, even decoys!”); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123; System.out.println(“I’m flying!!”); &#125; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123; System.out.println(“I can’t fly”); &#125; </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123; System.out.println(“Quack”); </span><br><span class="line">  	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  	</span>&#123; System.out.println(“ Silence ”); </span><br><span class="line">    	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  </span>&#123; System.out.println(“Squeak”); </span><br><span class="line">  	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>客户端必须意识到不同的策略。该模式有一个潜在的缺点，即客户端必须先了解不同的策略，然后才能选择合适的策略。客户端可能面临实现问题。</li>
<li>更多对象</li>
<li>Strategy和Context的沟通开销</li>
</ul>
<h1 id="工厂模式-创建型模式"><a href="#工厂模式-创建型模式" class="headerlink" title="工厂模式-创建型模式"></a>工厂模式-创建型模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="模式结构-1"><a href="#模式结构-1" class="headerlink" title="模式结构"></a>模式结构</h3><ul>
<li>Factory</li>
<li>Product</li>
<li>ConcreteProduct</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210601211232083.png" alt="image-20210601211232083"></p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ul>
<li><p>Simple Factory Pattern&amp;Static Factory Method</p>
</li>
<li><p>将对象的创建和对象本身业务处理分离可以降低系统的耦合度</p>
</li>
<li><p>简单工厂模式最大的问题在于工厂类的职责相对过重</p>
<ul>
<li>当有新产品要加入到系统中时 ，必须修改工厂类，加入必要的处理逻辑，这违背了“ 开闭原则”。</li>
</ul>
</li>
<li><p>当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</p>
</li>
<li><p>工厂方法是静态方法</p>
<ul>
<li>利用静态方法定义一个简单的工厂，这是常见的技巧，被称为静态工厂</li>
<li>不需要使用创建对象的方法来实例化对象</li>
<li>不能通过继承来改变创建方法的行为</li>
</ul>
</li>
<li><p>简单工厂其实不是一种设计模式，更像是编程习惯</p>
</li>
</ul>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h3 id="模式结构-2"><a href="#模式结构-2" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210603110413857.png" alt="image-20210603110413857"></p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><ul>
<li>Factory Method Pattern&amp;Virtual Constructor&amp;Polymorphic Factory</li>
</ul>
<ul>
<li>在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。</li>
<li>工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</li>
<li>符合“开闭原则”</li>
<li>工厂方法模式退化后可以演变成简单工厂模式。</li>
</ul>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PayMethodFactory</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractPay <span class="title">getPayMethod</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashPayFactory</span> <span class="keyword">extends</span> <span class="title">PayMethodFactory</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> AbstractPay <span class="title">getPayMethod</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CashPay(); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//client</span></span><br><span class="line">PayMethodFactory factory; </span><br><span class="line">AbstractPay payMethod; </span><br><span class="line">factory=<span class="keyword">new</span> CashPayFactory();</span><br><span class="line">payMethod =factory.getPayMethod();</span><br><span class="line">payMethod.pay();</span><br></pre></td></tr></table></figure>

<p>p.s. 真正的开发过程中，不直接使用new关键字来创建对象，而是将具体类名写入配置文件，通过java的反射机制创建类</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="模式结构-3"><a href="#模式结构-3" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210603114903839.png" alt="image-20210603114903839"></p>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><ul>
<li><p>kit pattern</p>
</li>
<li><p>Provide an interface for creating <strong>families of related or dependent objects</strong> without specifying their concrete classes.</p>
<p>Frequency of use: <strong>high</strong></p>
</li>
<li><p>开闭原则的倾斜性(增加新的工厂和产品族容易，增加新的产品等级结构麻烦)</p>
</li>
<li><p>当只存在一个产品等级结构的时候，抽象工厂模式退化为工厂方法模式</p>
</li>
<li><p>当工厂方法模式中的抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化为简单工厂模式</p>
</li>
</ul>
<h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210605210623.png" alt="image-20210605210623734"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210605211043.png" alt="image-20210605211043731"></p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210605211230.png" alt="image-20210605211230541"></p>
<h1 id="建造者模式-创建型模式"><a href="#建造者模式-创建型模式" class="headerlink" title="建造者模式-创建型模式"></a>建造者模式-创建型模式</h1><h2 id="模式结构-4"><a href="#模式结构-4" class="headerlink" title="模式结构"></a>模式结构</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210605212809.png" alt="image-20210605212809024"></p>
<p>包含抽象建造者、具体建造者、指挥者、产品角色</p>
<ul>
<li>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li>
<li>建造者模式是一步一步创建一个复杂的对象<ul>
<li>用户只通过制定复杂对象的类型和内容就可以构建他们</li>
<li>建造者模式属于对象创建型模式</li>
</ul>
</li>
</ul>
<h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>Separate the construction of a complex object</strong> from its representation so that the <strong>same construction process</strong> can <strong>create different representations</strong></p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol>
<li>Product</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String partA; <span class="comment">//可以是任意类型</span></span><br><span class="line">  <span class="keyword">private</span> String partB;</span><br><span class="line">  <span class="keyword">private</span> String partC;</span><br><span class="line">  <span class="comment">//partA的Getter方法和Setter方法省略 </span></span><br><span class="line">  <span class="comment">//partB的Getter方法和Setter方法省略 </span></span><br><span class="line">  <span class="comment">//partC的Getter方法和Setter方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Builder</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span></span>; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> product; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>Director</p>
<ul>
<li>隔离客户与生产过程</li>
<li>负责控制产品的生成过程</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Builder builder; </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  	<span class="keyword">this</span>.builder=builder; </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuilder</span><span class="params">(Builder builder)</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"> 		<span class="keyword">this</span>.builder=builer;</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    builder.buildPartA();</span><br><span class="line"></span><br><span class="line">    builder.buildPartB();</span><br><span class="line"></span><br><span class="line">    builder.buildPartC();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> builder.getResult(); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Client</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Builder builder = <span class="keyword">new</span> ConcreteBuilder(); </span><br><span class="line">Director director = <span class="keyword">new</span> Director(builder); </span><br><span class="line">Product product = director.construct();</span><br></pre></td></tr></table></figure>

<h3 id="模式的简化"><a href="#模式的简化" class="headerlink" title="模式的简化"></a>模式的简化</h3><ol>
<li>如果系统中只需要一个具体的建造者，可以<strong>省略抽象建造者</strong></li>
<li>在具体建造者只有一个的情况下，如果抽象建造者角色已经被省略，还可以<strong>省略指挥者</strong>，让Builder角色扮演指挥者和建造者的双重角色</li>
</ol>
<h3 id="与工厂模式的比较"><a href="#与工厂模式的比较" class="headerlink" title="与工厂模式的比较"></a>与工厂模式的比较</h3><ol>
<li>与抽象工厂模式相比，建造者模式返回一个<strong>组装好的完整产品</strong>，而抽象厂模式返回<strong>一系列相关的产品</strong>，这些产品位于不同的产品等级结构，构成了一个产品族。</li>
<li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法， 而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤， 它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li>
<li>如果将抽象工厂模式看成<strong>汽车配件生产工厂</strong>，生产一个产品族的产品，那 么建造者模式就是一个<strong>汽车组装工厂</strong>，通过对部件的组装可以返回一辆完整的汽车。</li>
</ol>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</li>
<li>用户使用不同的具体建造者即可得到不同的产品对象</li>
<li>可以更加精细地控制产品的创建过程</li>
<li>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象 建造者类编程，系统扩展方便，符合“开闭原则”</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似， 如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制</li>
<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类 来实现这种变化，导致系统变得很庞大</li>
</ol>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol>
<li>需要生成的产品对象有复杂的内部结构</li>
<li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序</li>
<li>对象的创建过程独立于创建该对象的类</li>
<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同 的产品。</li>
</ol>
<h2 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-套餐"><a href="#e1-套餐" class="headerlink" title="e1.套餐"></a>e1.套餐</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210623202318.png" alt="image-20210623202318848"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MealBuilder</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> VegBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Coke());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;   </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareNonVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Pepsi());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="e2-JavaMail"><a href="#e2-JavaMail" class="headerlink" title="e2.JavaMail"></a>e2.JavaMail</h3><p>一步一步构造一个完整的邮件对象，然后发送</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210623203229.png" alt="image-20210623203229770"></p>
]]></content>
      <categories>
        <category>NJUSE课程</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-2</title>
    <url>/2021/06/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-2/</url>
    <content><![CDATA[<h1 id="原型模式-Prototype-Pattern-对象创建型模式"><a href="#原型模式-Prototype-Pattern-对象创建型模式" class="headerlink" title="原型模式(Prototype Pattern)-对象创建型模式"></a>原型模式(Prototype Pattern)-对象创建型模式</h1><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210623205806.png" alt="image-20210623205806309" style="zoom:50%;" />

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>Specify the kind of objects to create</strong> using a <strong>prototypical instance</strong>, and create new objects by <strong>copying this prototype</strong></p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ol>
<li><p>Prototype：抽象原型类</p>
</li>
<li><p>ConcretePrototype：具体原型类</p>
</li>
<li><p>Client：客户类</p>
</li>
</ol>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过一个已有实例可以提高新实例的创建效率</li>
<li>可以动态的增加或者减少产品类</li>
<li>原型模式提供了简化的创建结构</li>
<li>可以使用深克隆的方式保存对象的状态</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>需要为每一个类配备一个克隆方法（对已有的类进行改造时，不一定是件容易的事， 必须修改其源代码，违背了“开闭原则”）</li>
<li>实现深克隆时需要编写较为复杂的代码</li>
</ol>
<h3 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h3><ol>
<li>创建新对象成本较大（相似对象，则可以对其属性稍作修改）</li>
<li>如果系统要保存对象的状态，而对象的状态变化很小，或者对象本身占内存不大的时候，也可以使用<strong>原型模式配合备忘录模式</strong>来应用。</li>
<li>需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便</li>
</ol>
<h3 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>ctrl c &amp; ctrl v</li>
<li>在Struts2中为了保证线程的安全性 ， Action 对象的创建使用了原型模式 </li>
<li>在 Spring 中 ，用户也可以采用原型模式来创建新的 bean 实例</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>通常情况下，一个类包含一些成员对象，在使用原型模式克隆对象时，根据其成员对象是否也克隆，原型模式可以分为两种形式：深克隆和浅克隆</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-java-lang-Object"><a href="#e1-java-lang-Object" class="headerlink" title="e1.java.lang.Object"></a>e1.java.lang.Object</h3><ol>
<li>在原型模式结构中定义了一个抽象原型类，所有的Java 类都继承自java.lang.Object，而Object类提供一个 clone()方法，可以将一个Java对象复制一份。因此在 Java中可以直接使用Object提供的clone()方法来实现对象的克隆，Java语言中的原型模式实现很简单<ol>
<li>对任何的对象x，都有x.clone() !=x，即克隆对象与原对象不是同一个对象</li>
<li>对任何的对象x，都有 x.clone().getClass()==x.getClass()，即克隆对象与原对象的类型一样</li>
<li>如果对象x的equals()方法定义恰当，那么 x.clone().equals(x)应该成立。</li>
</ol>
</li>
<li>能够实现克隆的Java类必须实现一个标识接口Cloneable， 表示这个Java类支持复制。如果一个类没有实现这个接 口但是调用了clone()方法，Java编译器将抛出一个 CloneNotSupportedException异常。</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210623210121.png" alt="image-20210623210121579" style="zoom:50%;" />

<h3 id="e2-邮件复制-浅克隆"><a href="#e2-邮件复制-浅克隆" class="headerlink" title="e2.邮件复制(浅克隆)"></a>e2.邮件复制(浅克隆)</h3><p>邮件对象包含的内容较多（如发送者、接收者、标 题、内容、日期、附件等）使用原型模式设计该系统。在本实例中使用浅克隆实现邮件复制，即复制邮件(Email)的同时不复制附件(Attachment)。</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210623212102.png" alt="image-20210623212102572" style="zoom:50%;" />

<h2 id="模式拓展"><a href="#模式拓展" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="带原型管理器的原型模式"><a href="#带原型管理器的原型模式" class="headerlink" title="带原型管理器的原型模式"></a>带原型管理器的原型模式</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210623212846.png" alt="image-20210623212846677" style="zoom:50%;" />

<h3 id="相似对象的复制"><a href="#相似对象的复制" class="headerlink" title="相似对象的复制"></a>相似对象的复制</h3><p>很多情况下，复制所得到的对象与原型对象并不是完全相同的，它们的某些属性值存在异同。通过原型模式获得相同对象后可以再对其属性进行修改，从而获取所需对象。如多个学生对象的信息的区别在于性别、姓名和年龄，而专业、学院、学校等信息都相同，为了简化创建过程，可以通过原型模式来实现相似对象的复制。</p>
<h1 id="状态模式-State-Pattern-行为型模式"><a href="#状态模式-State-Pattern-行为型模式" class="headerlink" title="状态模式(State Pattern)-行为型模式"></a>状态模式(State Pattern)-行为型模式</h1><h2 id="模式结构-1"><a href="#模式结构-1" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210623213442.png" alt="image-20210623213442769" style="zoom:50%;" />

<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>Allow an object to alter its behavior when its <strong>internal state</strong> changes. The object will appear to change its class.</p>
<blockquote>
<p>其实我们是通过适用组合通过简单引用不同的状态对象来造成类改变的假象</p>
</blockquote>
<h3 id="模式结构-2"><a href="#模式结构-2" class="headerlink" title="模式结构"></a>模式结构</h3><p>Context: 环境类</p>
<blockquote>
<p>环境类实际上就是拥有状态的对象，环境类有时候可以充当状态管理器(State Manager)的角色，可以在环境类中对状态进行切换操作。</p>
</blockquote>
<p>State: 抽象状态类</p>
<blockquote>
<p>引入了一个抽象类(或者接口)来专门表示对象的状态，这个类我们叫做抽象状态类，而对象的每一种具体状态类都继承了该类，并在不同具体状态类中实现了不同状态的行为，包括各种状态之间的转换。</p>
</blockquote>
<p>ConcreteState: 具体状态类</p>
<blockquote>
<p> 将不同对象下的行为单独提取出来封装在具体的状态类中，使得环境类对象在其内部状态改变时可以改变它的行为，对象看起来似乎修改了它的类，而实际上是由于切换到不同的具体状态类实现 的。</p>
</blockquote>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol>
<li>封装了转换的原则</li>
<li>枚举可能的状态</li>
<li>方便增加新的状态</li>
<li>允许状态转换逻辑与状态对象合成一体，而不是某一个 巨大的条件语句块。</li>
<li>可以让多个环境对象共享一个状态对象</li>
</ol>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>增加系统类和对象的个数</li>
<li>使用不当会导致程序结构和代码混乱</li>
<li>对开闭原则支持并不友好</li>
</ol>
<h3 id="适用环境-1"><a href="#适用环境-1" class="headerlink" title="适用环境"></a>适用环境</h3><ol>
<li>对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。</li>
<li>代码中包含大量与对象状态有关的条件语句</li>
</ol>
<h3 id="模式应用-1"><a href="#模式应用-1" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>工作流&amp;游戏中，例如政府OA办公系统。使用状态模式可以描述工作流对象（如批文 ）的状态转换以及不同状态下它所具有的行为</li>
<li>在目前主流的RPG（Role Play Game，角色扮演游戏）中，使用状态模式可以对游戏角色进行控制</li>
</ol>
<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-糖果机器"><a href="#e1-糖果机器" class="headerlink" title="e1.糖果机器"></a>e1.糖果机器</h3><p>head first上的例子，糖果机器和状态。比较在意的是糖果机器拥有对状态的引用，状态同时也引用机器（状态的切换在state中实现）</p>
<p>一般来说，当状态的转换是固定的时候，就设放在context中，当转换比较动态的时候，就放在状态类中，但是这样使得状态类之间产生了依赖（例子中在context里加入getter方法减少依赖）。其实也就是对context类还是对状态类的修改封闭做抉择。</p>
<h3 id="e2-tcpConnection"><a href="#e2-tcpConnection" class="headerlink" title="e2.tcpConnection"></a>e2.tcpConnection</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624210608.png" alt="image-20210624210608849"></p>
<h2 id="模式拓展-1"><a href="#模式拓展-1" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="共享状态"><a href="#共享状态" class="headerlink" title="共享状态"></a>共享状态</h3><p>在有些情况下多个环境对象需要共享同一个状态，如果希望在系统中实现<strong>多个环境对象实例共享一个或多个状态对象</strong>，那么需要将这些状态对象定义为环境的静态成员对象。</p>
<p>如果state对象都没有实例变量，那么各个Context可以共享一个State对象，此时的状态是没有内部状态，只有行为的轻量级对象（Flyweight）</p>
<h3 id="简单状态模式与可切换状态的状态模式"><a href="#简单状态模式与可切换状态的状态模式" class="headerlink" title="简单状态模式与可切换状态的状态模式"></a>简单状态模式与可切换状态的状态模式</h3><ul>
<li>简单状态模式是指状态都相互独立， 状态之间无须进行转换的状态模式。它遵循“开闭原则”，在客户端可以针对抽象状态类进行编程</li>
<li>状态类与环境类之间通常还存在关联关系或者依赖关系，在实现状态切换时，在具体状态类内部需要调用环境类Context的setState()方法进行状态的转换操作，增加新的状态类可能需要修改其他某些状态类甚至环境类的源代码</li>
</ul>
<h2 id="与策略模式的比较"><a href="#与策略模式的比较" class="headerlink" title="与策略模式的比较"></a>与策略模式的比较</h2><p>策略模式和状态模式的类图是一样的。</p>
<ul>
<li>对于状态模式，我们将一群<strong>行为封装在状态对象</strong>中，context对象中的行为随时可以委托到那些状态对象中的一个。当前状态在状态集合中转换，反映context的内部状态，从而使得context的行为改变。但是context的<strong>客户对于状态对象基本没有了解</strong></li>
<li>策略模式，客户通常指定context索要组合的策略对象</li>
</ul>
<h3 id="与表驱动的状态机的比较"><a href="#与表驱动的状态机的比较" class="headerlink" title="与表驱动的状态机的比较"></a>与表驱动的状态机的比较</h3><p>/TODO 最后有一节表驱动，不知联系，这里先一笔带过 </p>
<p>State模式对与状态相关的行为进行建模，表驱动着重于定义状态转换</p>
<h1 id="命令模式（Command-Pattern）-行为型模式"><a href="#命令模式（Command-Pattern）-行为型模式" class="headerlink" title="命令模式（Command Pattern）-行为型模式"></a>命令模式（Command Pattern）-行为型模式</h1><h2 id="模式结构-3"><a href="#模式结构-3" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624211713.png" alt="image-20210624211713361" style="zoom:50%;" />

<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><strong>Encapsulate a request</strong> as an object, thereby letting you <strong>parameterize clients with different requests</strong>, queue or log requests, and support undoable operations.</p>
<h3 id="模式结构-4"><a href="#模式结构-4" class="headerlink" title="模式结构"></a>模式结构</h3><p>Command: 抽象命令类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>; &#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteCommand: 具体命令类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Receiver receiver;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123; receiver.action(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Invoker: 调用者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> Command command;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.command=command; &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.command=command; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//业务方法，用于调用命令类的方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    command.execute(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Receiver: 接收者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123; <span class="comment">//具体操作 &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<p>Client:客户类</p>
<h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ol>
<li>对命令进行封装，将发出命令的责任 和执行命令的责任分割开</li>
<li>命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口</li>
<li>命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li>
<li>命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。</li>
</ol>
<h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol>
<li>降低系统的耦合度</li>
<li>新的命令可以容易地加入到系统中</li>
<li>可以比较容易的设计一个命令队列和宏命令（组合命令）</li>
<li>可以方便地实现对命令的Undo和Redo<ol>
<li>ConcreteCommand对象需要存储额外的状态信息：接收者对象；接收者执行操作的参数；如果请求的操作会改变接收者对象中的某些值，那么这些值也要先存储起来</li>
<li>如果只支持一次取消操作，那么只需要存储最近一次被执行的命令，如果是多级的取消和重做，则需要一个历史列表</li>
<li>被放入历史列表中的必须拷贝的command（没有改变状态的保存引用即可）起着原型的作用</li>
</ol>
</li>
</ol>
<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><p>导致系统有过多的具体命令类</p>
<h3 id="适用环境-2"><a href="#适用环境-2" class="headerlink" title="适用环境"></a>适用环境</h3><ol>
<li><p>需要将请求调用者和请求接收者解耦合</p>
</li>
<li><p>需要在不同的时间指定请求、将请求排队和执行请求</p>
</li>
<li><p>支持Undo和Redo</p>
</li>
<li><p>需要将一系列操作组合</p>
</li>
</ol>
<h3 id="模式应用-2"><a href="#模式应用-2" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>Java语言使用命令模式实现AWT/Swing GUI的委派事件模型 (Delegation Event Model, DEM)</li>
<li>UNIX平台下的 Shell编程</li>
</ol>
<h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-Order"><a href="#e1-Order" class="headerlink" title="e1.Order"></a>e1.Order</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624213726.png" alt="image-20210624213726634" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Stock abcStock = <span class="keyword">new</span> Stock();</span><br><span class="line"> </span><br><span class="line">      BuyStock buyStockOrder = <span class="keyword">new</span> BuyStock(abcStock);</span><br><span class="line">      SellStock sellStockOrder = <span class="keyword">new</span> SellStock(abcStock);</span><br><span class="line"> </span><br><span class="line">      Broker broker = <span class="keyword">new</span> Broker();</span><br><span class="line">      broker.takeOrder(buyStockOrder); <span class="comment">//broker内维护一个orderList</span></span><br><span class="line">      broker.takeOrder(sellStockOrder);</span><br><span class="line"> </span><br><span class="line">      broker.placeOrders(); <span class="comment">//顺序执行列表操作最后清空</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="e2-电视机遥控器"><a href="#e2-电视机遥控器" class="headerlink" title="e2.电视机遥控器"></a>e2.电视机遥控器</h3><p>电视机是receiver 遥控器是请求的发送者</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624214338.png" alt="image-20210624214338213" style="zoom: 200%;" />

<h3 id="e3-自定义功能键"><a href="#e3-自定义功能键" class="headerlink" title="e3.自定义功能键"></a>e3.自定义功能键</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624214648.png" alt="image-20210624214648296" style="zoom:50%;" />

<h3 id="e4-菜单栏"><a href="#e4-菜单栏" class="headerlink" title="e4.菜单栏"></a>e4.菜单栏</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624214925.png" alt="image-20210624214925899" style="zoom:50%;" />

<p>concreteCommand: PasteCommand&amp;OpenCommand</p>
<p>Client: Application</p>
<p>Invoker: MenuItem</p>
<p>Receiver: Document&amp;Application(知道如何实施与执行一个请求相关的操作。任何类都可能作为一个接收者)</p>
<h2 id="模式拓展-2"><a href="#模式拓展-2" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624225225.png" alt="image-20210624225225409"></p>
<h2 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624225257.png" alt="image-20210624225257132" style="zoom:50%;" />

<p>宏命令也是一个具体命令，不过它包含了对其他命令对象 的引用，在调用宏命令的execute()方法时，将递归调用它所包含的每个成员命令的execute()方法，一个宏命令的成员对象可以是简单命令，还可以继续是宏命令</p>
<h1 id="观察者模式（Observer-Pattern）-行为型模式"><a href="#观察者模式（Observer-Pattern）-行为型模式" class="headerlink" title="观察者模式（Observer Pattern）-行为型模式"></a>观察者模式（Observer Pattern）-行为型模式</h1><h2 id="模式结构-5"><a href="#模式结构-5" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624233124.png" alt="image-20210624233124224" style="zoom:50%;" />



<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>Define a <strong>one-to-many dependency</strong> between objects so that when <strong>one object changes state</strong>, <strong>all its dependents are notified and updated automatically</strong>.</p>
<h3 id="模式结构-6"><a href="#模式结构-6" class="headerlink" title="模式结构"></a>模式结构</h3><ul>
<li>Subject 目标</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> ArrayList observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ConcreteSubject 具体目标</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123; observers.add(observer); &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123; observers.remove(observer); &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(Object obs:observers) &#123; 				   ((Observer)obs).update(); &#125; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Observer 观察者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ConcreteObserver 具体观察者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="comment">//具体更新代码</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模式分析-1"><a href="#模式分析-1" class="headerlink" title="模式分析"></a>模式分析</h3><ol>
<li>观察者模式描述了如何建立对象与对象之间的依赖关系</li>
<li>一个目标可以有任意数目的与之相依赖的观察者，一旦目标的状态发生改变，所有的观察者都将得到通知</li>
<li>作为对这个通知的响应，每个观察者都将即时更新自己的状态，以 与目标状态同步， 这种交互也称为发布-订阅(publish-subscribe)目标是通知的发布者，它发出通知时并不需要知道谁是它的观察者， 可以有任意数目的观察者订阅它并接收通知</li>
</ol>
<h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ol>
<li>实现表示层和数据逻辑层的分离</li>
<li>在观察目标和观察者之间建立了抽象的耦合</li>
<li>支持广播通信</li>
<li>符合开闭原则</li>
</ol>
<h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>如果一个观察目标有很多直接或者间接的观察者，将所有观察者都通知到会花费很多时间</li>
<li>如果观察者和观察目标之间有循环依赖的话，观察目标会触发循环调用，导致系统崩溃</li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎样发生变化的，仅仅是知道观察目标发生了变化</li>
</ol>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol>
<li>一个抽象模型有两个方面，一个方面依赖另一个方面，将这些方面封装在独立的对象中使得他们可以各自独自地改变和复用</li>
<li>一个对象的改变将导致其他的一个或多个对象也发生改变，而不知道具体有多少对象将要发生改变</li>
<li>一个对象必须通知其他对象，而并不知道这些对象是谁</li>
<li>需要在系统中创建一个触发链（链式触发机制）</li>
</ol>
<h3 id="模式应用-3"><a href="#模式应用-3" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>委派事件模型(Delegation Event Model, DEM)：事件源对象、事件监听对象（事件处理对象）和事件对象构成了Java 事件处理模型的三要素。</li>
<li>SAX2以及Servlet技术的事件处理机制都基于DEM</li>
<li>凡是涉及到一对一或者一对多的对象交互场景都可以使用观察者模式。</li>
</ol>
<h2 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-猫狗老鼠"><a href="#e1-猫狗老鼠" class="headerlink" title="e1.猫狗老鼠"></a>e1.猫狗老鼠</h3><p>猫叫老鼠叫、狗也叫</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210624234804.png" alt="image-20210624234804147"></p>
<h3 id="e2-自定义登陆组件"><a href="#e2-自定义登陆组件" class="headerlink" title="e2.自定义登陆组件"></a>e2.自定义登陆组件</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625131554.png" alt="image-20210625131554257" style="zoom:50%;" />

<h3 id="e3-气象站"><a href="#e3-气象站" class="headerlink" title="e3.气象站"></a>e3.气象站</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625135247.png" alt="image-20210625135247091" style="zoom:50%;" />

<ul>
<li>为什么要保存对 Subject的引用呢？构造完后似乎用不着了呀？</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123; <span class="keyword">this</span>.weatherData = weatherData; weatherData.registerObserver(<span class="keyword">this</span>); &#125;</span><br></pre></td></tr></table></figure>

<p>的确如此， 但是以后我们可能想要取消注册， 如果已经有了对Subject的引用会比较方便。</p>
<h2 id="模式拓展-3"><a href="#模式拓展-3" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>JDK的util包中，提供了Observable类和Observer接口</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625133847.png" alt="image-20210625133847269" style="zoom:50%;" />

<p><strong>setchange()</strong></p>
<p>setChanged()方法用来标记状态已经改变的事实，好让notifyObservers()知道当它被调 用时应该更新观察者。如果调用notifyObservers()之前没有先调用setChanged()，观察者 就“不会”被通知。(clearChanged将状态设置为false，haschanged()查看当前状态)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setChanged()&#123;</span><br><span class="line">  changed=<span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">notifyObservers(Object arg)&#123;</span><br><span class="line">  <span class="keyword">if</span>(changed)&#123;</span><br><span class="line">    <span class="keyword">for</span> observer on the list&#123;</span><br><span class="line">      update();</span><br><span class="line">    &#125;</span><br><span class="line">    changed=<span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">notifyObservers()&#123;</span><br><span class="line">	notifyObservers(<span class="keyword">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>为什么需要Obeject arg：</strong></p>
<p>如何与调用者通信，则是添加了类型为Object的参数（该参数是调用者调用Observable实例的notifyObservers(Object obj)方法时传入的，当然也可以不传）</p>
<p><strong>Push model &amp; pull model</strong></p>
<ul>
<li><p>目标向观察者发送改变的详细信息，而不管它们需要与否（假设目标知道一些观察者需要的信息，使得观察者相对难复用）：推模型</p>
<ul>
<li>“推”（push）数据给观察者，可以把数据当作数据对象传送给 notifyObservers(arg)方法</li>
</ul>
</li>
<li><p>目标除了最小通知外什么都不送出，而在此之后由观察者显式地向目标询问（强调目标不知道它的观察者是谁）：拉模型</p>
<ul>
<li>我们没有调用 notifyObservers()传送数据对象，这表示采用的做法是“拉”。</li>
</ul>
</li>
</ul>
<p><strong>一些缺点：</strong></p>
<ul>
<li>Observable是一个具体实现类，面向细节了,而未面向抽象</li>
<li>使用Observable时需要使用继承，由于java的类单继承性，如果你的类已经继承了一个类，将不能继承Observable来实现观察者模式，并且由于setChanged和clearChanged方法都是protected的，所以你也不能通过组合来完成观察者模式</li>
</ul>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625134325.png" alt="image-20210625134325318" style="zoom:67%;" />

<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625134246.png" alt="image-20210625134246245" style="zoom:67%;" />

<h1 id="中介者模式-Mediator-Pattern-行为型模式"><a href="#中介者模式-Mediator-Pattern-行为型模式" class="headerlink" title="中介者模式(Mediator Pattern)-行为型模式"></a>中介者模式(Mediator Pattern)-行为型模式</h1><h2 id="模式结构-7"><a href="#模式结构-7" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625141624.png" alt="image-20210625141624224" style="zoom:67%;" />

<h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>Define an object that encapsulates how a set of objects interact. Mediator promotes <strong>loose coupling</strong> by <strong>keeping objects from referring to each other explicitly</strong>, and it lets you <strong>vary their interaction independently</strong>.</p>
<h3 id="模式结构-8"><a href="#模式结构-8" class="headerlink" title="模式结构"></a>模式结构</h3><ul>
<li>Mediator:中介者，定义一个接口用于和各个colleague对象通信</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> ArrayList colleagues;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Colleague colleague)</span> </span>&#123; colleagues.add(colleague); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ConcreteMediator：具体中介者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; ...... ((Colleague)(colleagues.get(<span class="number">0</span>))).method1(); ......</span><br><span class="line"></span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Colleague：同事类都知道他的中介者对象，当需要和其他同事通信的时候，与中介者通信</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> Mediator mediator; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123; <span class="keyword">this</span>.mediator=mediator; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ConcreteColleague</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague</span><span class="params">(Mediator mediator)</span> </span>&#123; <span class="keyword">super</span>(mediator); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123; ......&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123; mediator.operation1(); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模式分析-2"><a href="#模式分析-2" class="headerlink" title="模式分析"></a>模式分析</h3><ol>
<li>使得对象之间的关系数量急剧的减少</li>
<li>中介者的职责<ol>
<li>中转作用（结构性）</li>
<li>协调作用（行为性）</li>
</ol>
</li>
<li>中介者模式是迪米特法则的经典应用：通过创造出一个中介者对象，将系统中的对象引用的其他对象数目减少到最小</li>
</ol>
<h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><ol>
<li>简化了对象之间的交互</li>
<li>将各类同事解耦合</li>
<li>减少子类生成</li>
<li>简化对各同事类的设计和实现</li>
</ol>
<h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><p>在具体中介者类中包含了同事之间的交互细节，可能会导致具体中介类非常复杂，使得系统难以维护</p>
<h3 id="适用条件"><a href="#适用条件" class="headerlink" title="适用条件"></a>适用条件</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625143508.png" alt="image-20210625143508130" style="zoom:67%;" />

<h3 id="模式应用-4"><a href="#模式应用-4" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>驱动类软件，比如设计GUI时组件的协调</li>
<li>MVC中的Controller就是中介者，负责view和model的交互</li>
<li>Struts中，Action作为JSP与业务对象的中介</li>
</ol>
<h2 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625142813.png" alt="image-20210625142813390" style="zoom:67%;" />

<h2 id="模式拓展-4"><a href="#模式拓展-4" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="与迪米特法则"><a href="#与迪米特法则" class="headerlink" title="与迪米特法则"></a>与迪米特法则</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625144030.png" alt="image-20210625144030428" style="zoom: 67%;" />

<h3 id="与GUI开发"><a href="#与GUI开发" class="headerlink" title="与GUI开发"></a>与GUI开发</h3><p>GUI开发中多个界面中组件的交互关系可以交给中介者</p>
<h1 id="模版方法模式-Template-Method-Pattern-行为型模式"><a href="#模版方法模式-Template-Method-Pattern-行为型模式" class="headerlink" title="模版方法模式(Template Method Pattern)-行为型模式"></a>模版方法模式(Template Method Pattern)-行为型模式</h1><h2 id="模式结构-9"><a href="#模式结构-9" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625145223.png" alt="image-20210625145223752" style="zoom:67%;" />

<p>基于父类，将相同的代码放在父类，不同的放在子类</p>
<h2 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>Define the <strong>skeleton of an algorithm</strong> in an operation, <strong>deferring some steps to subclasses</strong>. Template Method lets subclasses <strong>redefine certain steps</strong> of an algorithm <strong>without changing the algorithm’s structure.</strong></p>
<h3 id="模式结构-10"><a href="#模式结构-10" class="headerlink" title="模式结构"></a>模式结构</h3><p>AbstractClass: 抽象类</p>
<p>ConcreteClass: 具体子类</p>
<h3 id="模式分析-3"><a href="#模式分析-3" class="headerlink" title="模式分析"></a>模式分析</h3><ol>
<li>只有类的继承关系，没有对象关联关系</li>
<li>实现具体逻辑步骤的方法成为基本方法 (Primitive Method)， 而将这些基本方法汇总起来的方法称为模板方法(Template Method)</li>
<li>基本方法包括<ol>
<li>抽象方法</li>
<li>具体方法</li>
<li>钩子方法</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">template</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  open();</span><br><span class="line">  display();</span><br><span class="line">  <span class="keyword">if</span>(isPrint())</span><br><span class="line">    &#123;</span><br><span class="line">    print();</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//钩子方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在模板方法模式中，由于面向对象的多态性，子类对象在运行时将覆盖父类对象，子类中定义的方法也将覆盖父类中定义的方法，因此程序在运行时，具体子类的基本方法将覆盖父类中定义的基本方法，子类的钩子方法 也将覆盖父类的钩子方法，从而可以通过在子类中实现的钩子方法对父类方法的执行进行约束，实现子类对父类行为的反向控制。</li>
</ol>
<h3 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625150426.png" alt="image-20210625150426831" style="zoom:50%;" />

<h3 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625150454.png" alt="image-20210625150454761" style="zoom:50%;" />

<h3 id="适用条件-1"><a href="#适用条件-1" class="headerlink" title="适用条件"></a>适用条件</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625150537.png" alt="image-20210625150536976" style="zoom:50%;" />

<h3 id="模式应用-5"><a href="#模式应用-5" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>框架开发（spring、Struts）中父类控制处理流程的逻辑顺序</li>
<li>Junit</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625150715.png" alt="image-20210625150715552" style="zoom:50%;" />


<h2 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-银行业务"><a href="#e1-银行业务" class="headerlink" title="e1.银行业务"></a>e1.银行业务</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625150239.png" alt="image-20210625150239319" style="zoom:50%;" />

<h3 id="e3-数据库操作模版"><a href="#e3-数据库操作模版" class="headerlink" title="e3.数据库操作模版"></a>e3.数据库操作模版</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625150319.png" alt="image-20210625150319668" style="zoom: 67%;" />

<h2 id="模式拓展-5"><a href="#模式拓展-5" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="关于继承"><a href="#关于继承" class="headerlink" title="关于继承"></a>关于继承</h3><p>恰当使用继承，将可复用的一般代码移到父类（是体现继承优势的模式之一）</p>
<h3 id="好莱坞原则"><a href="#好莱坞原则" class="headerlink" title="好莱坞原则"></a>好莱坞原则</h3><p>Don‘t call us, we’ll call you：通过覆盖父类方法实现某些具体业务逻辑，父类控制对子类的调用</p>
<p>与依赖倒置原则一样，都是为了解耦合，但是依赖倒置更注重如何在设计中避免依赖</p>
<h3 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h3><ul>
<li>使得子类可以控制父类</li>
<li>最简单的钩子方法可以是空方法&amp;在钩子方法中定义一个默认的实现（只会返回true）</li>
<li>通过boolean对其他方法进行约束</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>[1]</strong> <a href="http://c.biancheng.net/view/1343.html">http://c.biancheng.net/view/1343.html</a></p>
<p><strong>[2]</strong> Head first 设计模式</p>
<p><strong>[3]</strong> 设计模式：可复用面向对象软件的基础</p>
]]></content>
      <categories>
        <category>NJUSE课程</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-3</title>
    <url>/2021/06/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3/</url>
    <content><![CDATA[<h1 id="适配器模式-Adapter-Pattern-结构型模式"><a href="#适配器模式-Adapter-Pattern-结构型模式" class="headerlink" title="适配器模式(Adapter Pattern)-结构型模式"></a>适配器模式(Adapter Pattern)-结构型模式</h1><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625152714.png" alt="image-20210625152714413" style="zoom:50%;" />

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>Convert the interface of a class into another interface clients expect</strong>. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.</p>
<h3 id="模式结构-1"><a href="#模式结构-1" class="headerlink" title="模式结构"></a>模式结构</h3><p>Target：目标抽象类</p>
<p>Adapter：适配器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123; specificRequest(); &#125; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Adaptee adaptee; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.adaptee=adaptee; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">adaptee.specificRequest(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Adaptee：适配者类</p>
<p>Client：客户类</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>将目标类和适配者类解耦合</li>
<li>增加了类的透明性和复用性</li>
<li>灵活性和拓展性都很好</li>
<li>类适配器：由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器灵活性更强</li>
<li>对象适配器：同一个适配器可以把适配者类和它的子类都适配到目标接口</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>类适配器：对于java&amp;cpp这样不支持多继承的语言，一次只能适配一个适配者类，而且目标抽象类只能为抽象类</li>
<li>对象适配器：对适配者类的方法不容易置换</li>
</ol>
<h3 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625154304.png" alt="image-20210625154304357" style="zoom: 50%;" />

<h3 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>JDBC</li>
</ol>
<p>每一个具体数据库引擎 （如SQL Server、Oracle、MySQL等）的JDBC驱 动软件都是一个介于JDBC接口和数据库引擎接口之 间的适配器软件</p>
<ol start="2">
<li>在JDK类库中也定义了一系列适配器类，如在 com.sun.imageio.plugins.common包中定义的 InputStreamAdapter类，用于包装ImageInputStream接口及其子类对象。</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-仿生机器人"><a href="#e1-仿生机器人" class="headerlink" title="e1.仿生机器人"></a>e1.仿生机器人</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625153342.png" alt="image-20210625153342631" style="zoom:50%;" />

<h3 id="e2-加密适配器"><a href="#e2-加密适配器" class="headerlink" title="e2.加密适配器"></a>e2.加密适配器</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625153425.png" alt="image-20210625153425308" style="zoom:50%;" />

<h2 id="模式拓展"><a href="#模式拓展" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="默认适配器模式（单接口适配器模式）"><a href="#默认适配器模式（单接口适配器模式）" class="headerlink" title="默认适配器模式（单接口适配器模式）"></a>默认适配器模式（单接口适配器模式）</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625154526.png" alt="image-20210625154526768" style="zoom:67%;" />

<p>不需要全部实现接口的方法时候，可以先设计一个抽象类实现接口，并为接口方法提供默认实现（空方法）</p>
<h3 id="双向适配器"><a href="#双向适配器" class="headerlink" title="双向适配器"></a>双向适配器</h3><p>如果适配器中同时包含对目标类和适配者类的引用，就是一个双向适配器</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625154705.png" alt="image-20210625154705785"></p>
<h1 id="组合模式-Composite-Pattern-对象结构型模式"><a href="#组合模式-Composite-Pattern-对象结构型模式" class="headerlink" title="组合模式(Composite Pattern)-对象结构型模式"></a>组合模式(Composite Pattern)-对象结构型模式</h1><h2 id="模式结构-2"><a href="#模式结构-2" class="headerlink" title="模式结构"></a>模式结构</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625180143.png" alt="image-20210625180143204"></p>
<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>Compose objects into <strong>tree structures</strong> to <strong>represent part-whole hierarchies</strong>. Composite lets clients <strong>treat individual objects and compositions of objects uniformly</strong></p>
<h3 id="模式结构-3"><a href="#模式结构-3" class="headerlink" title="模式结构"></a>模式结构</h3><p>Component:抽象构件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Leaf:叶子构件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123; <span class="comment">//异常处理或错误提示 &#125;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123; <span class="comment">//异常处理或错误提示 &#125;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="comment">//异常处理或错误提示 &#125;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123; <span class="comment">//实现代码 &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Composite:容器构件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">    list.add(c); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">    list.remove(c); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    (Component)list.get(i);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(Object obj:list)&#123;</span><br><span class="line">    ((Component)obj).operation();</span><br><span class="line">		&#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client:客户类</p>
<h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ol>
<li>组合模式的关键是定义了一个抽象构件类， 它既可以代表叶子， 又可以代表容器， 而客户端针对该抽象构件类进行编程， 无须知道它到底表示的是叶子还是容器，可以对其进行统一处理</li>
<li>同时容器对象与抽象构件类之间还建立一个聚合关联关系， 在容器对象中既可以包含叶子， 也可以包含容器，以此实现递归组合，形成一个树形结构</li>
</ol>
<h3 id="优点-amp-缺点"><a href="#优点-amp-缺点" class="headerlink" title="优点&amp;缺点"></a>优点&amp;缺点</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625181143.png" alt="image-20210625181143751"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625181159.png" alt="image-20210625181159290"></p>
<h3 id="适用环境-1"><a href="#适用环境-1" class="headerlink" title="适用环境"></a>适用环境</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625181225.png" alt="image-20210625181225183"></p>
<h3 id="模式应用-1"><a href="#模式应用-1" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>xml文档处理</li>
<li>操作系统的目录结构</li>
<li>JDK的AWT/Swing</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625181312.png" alt="image-20210625181312422" style="zoom:33%;" />

<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-文件系统"><a href="#e1-文件系统" class="headerlink" title="e1.文件系统"></a>e1.文件系统</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625180534.png" alt="image-20210625180534663" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625181038.png" alt="image-20210625181038498" style="zoom:50%;" />

<h3 id="e2-水果盘"><a href="#e2-水果盘" class="headerlink" title="e2.水果盘"></a>e2.水果盘</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625180959.png" alt="image-20210625180958979" style="zoom:50%;" />

<h2 id="模式拓展-1"><a href="#模式拓展-1" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="复杂的组合模式"><a href="#复杂的组合模式" class="headerlink" title="复杂的组合模式"></a>复杂的组合模式</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625181626.png" alt="image-20210625181626457" style="zoom:50%;" />

<h3 id="透明组合模式"><a href="#透明组合模式" class="headerlink" title="透明组合模式"></a>透明组合模式</h3><p>在该方式中，由于抽象构件声明了所有子类中的全部方法，所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的。但其缺点是：树叶构件本来没有 Add()、Remove() 及 GetChild() 方法，却要实现它们（空实现或抛异常），这样会带来一些安全性问题。</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625181636.png" alt="image-20210625181636851" style="zoom:50%;" />

<h3 id="安全组合模式"><a href="#安全组合模式" class="headerlink" title="安全组合模式"></a>安全组合模式</h3><p>在该方式中，将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法，这样就避免了上一种方式的安全性问题，但由于叶子和分支有不同的接口，客户端在调用时要知道树叶对象和树枝对象的存在，所以失去了透明性。</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625181648.png" alt="image-20210625181648002" style="zoom:50%;" />

<h1 id="桥接模式-Bridge-Pattern-对象结构型"><a href="#桥接模式-Bridge-Pattern-对象结构型" class="headerlink" title="桥接模式(Bridge Pattern)-对象结构型"></a>桥接模式(Bridge Pattern)-对象结构型</h1><h2 id="模式结构-4"><a href="#模式结构-4" class="headerlink" title="模式结构"></a>模式结构</h2><p>将继承关系转换为关联关系， 从而降低了类与类之间的耦合，减少了代码编写量。</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625194047.png" alt="image-20210625194047651" style="zoom:67%;" />

<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><strong>Decouple an abstraction from its implementation</strong> so that the two can vary independently</p>
<h3 id="模式结构-5"><a href="#模式结构-5" class="headerlink" title="模式结构"></a>模式结构</h3><p>Abstraction：抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> Implementor impl;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImpl</span><span class="params">(Implementor impl)</span> </span>&#123; <span class="keyword">this</span>.impl=impl; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RefinedAbstraction：扩充抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//代码</span></span><br><span class="line">	impl.operationImpl();</span><br><span class="line">	<span class="comment">//代码 </span></span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Implementor：实现类接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span></span>; &#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteImplementor：具体实现类</p>
<h3 id="模式分析-1"><a href="#模式分析-1" class="headerlink" title="模式分析"></a>模式分析</h3><p>理解桥接模式，重点需要理解如何将抽象化(Abstraction)与实现化 (Implementation)脱耦，使得二者可以独立地变化。</p>
<ul>
<li>抽象化：将对象共同性质抽取出来形成类</li>
<li>实现化：针对抽象化给出具体实现</li>
<li>脱耦：将抽象化和实现化之间的耦合解脱开，或者说是将他们之间的强关联改成弱关联，继承变成关联</li>
</ul>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625194840.png" alt="image-20210625194840226"></p>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625194854.png" alt="image-20210625194853999"></p>
<h3 id="适用环境-2"><a href="#适用环境-2" class="headerlink" title="适用环境"></a>适用环境</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625194923.png" alt="image-20210625194923808"></p>
<h3 id="模式应用-2"><a href="#模式应用-2" class="headerlink" title="模式应用"></a>模式应用</h3><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625194954.png" alt="image-20210625194954033"></p>
<h3 id="一个-Java桌面软件总是带有所在操作系统的视感-LookAndFeel"><a href="#一个-Java桌面软件总是带有所在操作系统的视感-LookAndFeel" class="headerlink" title="一个 Java桌面软件总是带有所在操作系统的视感 (LookAndFeel)"></a>一个 Java桌面软件总是带有所在操作系统的视感 (LookAndFeel)</h3><p>Java为AWT中的每一个GUI构件都提供了一个Peer构件，在AWT中的Peer架构就使 用了桥接模式。</p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>一个JDBC驱动程序可以 动态地将一个特定类型的数据库与一个Java应用程序绑定在一起，从而实现抽象角色与实现角色的动态耦合。</p>
<h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-毛笔"><a href="#e1-毛笔" class="headerlink" title="e1.毛笔"></a>e1.毛笔</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625194720.png" alt="image-20210625194720681" style="zoom:50%;" />

<h2 id="e2-跨平台视频播放器"><a href="#e2-跨平台视频播放器" class="headerlink" title="e2.跨平台视频播放器"></a>e2.跨平台视频播放器</h2><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210628183450.png" alt="image-20210628183414117"></p>
<h2 id="模式拓展-2"><a href="#模式拓展-2" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="适配器模式与桥接模式的联用"><a href="#适配器模式与桥接模式的联用" class="headerlink" title="适配器模式与桥接模式的联用"></a>适配器模式与桥接模式的联用</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625195144.png" alt="image-20210625195144648"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625195313.png" alt="image-20210625195313520"></p>
<h1 id="装饰者模式-Decorator-Pattern-对象结构型"><a href="#装饰者模式-Decorator-Pattern-对象结构型" class="headerlink" title="装饰者模式(Decorator Pattern)-对象结构型"></a>装饰者模式(Decorator Pattern)-对象结构型</h1><h2 id="模式结构-6"><a href="#模式结构-6" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625195625.png" alt="image-20210625195625624" style="zoom:50%;" />



<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p>
<h3 id="模式结构-7"><a href="#模式结构-7" class="headerlink" title="模式结构"></a>模式结构</h3><p>Component：抽象构件</p>
<p>ConcreteComponennt：具体构件</p>
<p>Decorator：抽象装饰类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Component component;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.component=component; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		component.operation(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteDecorator：具体装饰类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(component);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.operation();</span><br><span class="line">		addedBehavior();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addedBehavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//新增方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625201610.png" alt="image-20210625201610102" style="zoom:50%;" />

<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625201639.png" alt="image-20210625201639768" style="zoom: 67%;" />

<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625201659.png" alt="image-20210625201659662" style="zoom:50%;" />

<h3 id="模式应用-3"><a href="#模式应用-3" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>可以通过装饰模式动态给一些构件增加新 的行为或改善其外观显示</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JList list = <span class="keyword">new</span> JList(); </span><br><span class="line">JScrollPane sp = <span class="keyword">new</span> JScrollPane(list);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>javaIO</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625201855.png" alt="image-20210625201855445" style="zoom:50%;" />



<h2 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-transformer"><a href="#e1-transformer" class="headerlink" title="e1.transformer"></a>e1.transformer</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625201439.png" alt="image-20210625201439854"></p>
<h3 id="e2-多重加密系统"><a href="#e2-多重加密系统" class="headerlink" title="e2.多重加密系统"></a>e2.多重加密系统</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625201518.png" alt="image-20210625201518263"></p>
<h2 id="模式拓展-3"><a href="#模式拓展-3" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="装饰者模式简化的问题"><a href="#装饰者模式简化的问题" class="headerlink" title="装饰者模式简化的问题"></a>装饰者模式简化的问题</h3><ul>
<li><p>一个装饰类的接口必须与被装饰类的接口一致</p>
</li>
<li><p>不要把太多的逻辑和状态放到具体构件中</p>
</li>
<li><p>如果只有一个具体构件类而没有抽象构件类，那么抽象装饰类可以作为具体构件类的直接子类</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210628183144.png" alt="image-20210628183144835"></p>
<h3 id="透明的装饰模式"><a href="#透明的装饰模式" class="headerlink" title="透明的装饰模式"></a>透明的装饰模式</h3><p>客户端完全针对抽象编程：加密系统</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625202343.png" alt="image-20210625202343223" style="zoom: 67%;" />

<p>允许用户在客户端声明具体装饰者类型的对象，调用具体装饰者中新增的方法</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625202524.png" alt="image-20210625202524342" style="zoom:50%;" />

<h1 id="外观模式-Facade-Pattern-对象结构型"><a href="#外观模式-Facade-Pattern-对象结构型" class="headerlink" title="外观模式(Facade Pattern)-对象结构型"></a>外观模式(Facade Pattern)-对象结构型</h1><h2 id="模式结构-8"><a href="#模式结构-8" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625182754.png" alt="image-20210625182754559" style="zoom:67%;" />

<h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>Provide <strong>a unified interface</strong> to a set of interfaces in a subsystem. Facade <strong>defines a higher-level interface</strong> that makes the subsystem easier to use.</p>
<h3 id="模式结构-9"><a href="#模式结构-9" class="headerlink" title="模式结构"></a>模式结构</h3><p>Facade: 外观角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> SubSystemA obj1 = <span class="keyword">new</span> SubSystemA();</span><br><span class="line">  <span class="keyword">private</span> SubSystemB obj2 = <span class="keyword">new</span> SubSystemB();</span><br><span class="line">  <span class="keyword">private</span> SubSystemC obj3 = <span class="keyword">new</span> SubSystemC();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    obj1.method();</span><br><span class="line">    obj2.method();</span><br><span class="line">    obj3.method(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SubSystem:子系统角色</p>
<h3 id="模式分析-2"><a href="#模式分析-2" class="headerlink" title="模式分析"></a>模式分析</h3><ul>
<li><p>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问<strong>提供了一个简单而单一的入口。</strong></p>
</li>
<li><p>外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度</p>
</li>
<li><p>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户 端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交 道。</p>
</li>
<li><p>外观模式的目的在于降低系统的复杂程度。</p>
</li>
<li><p>外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。</p>
</li>
</ul>
<h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625183443.png" alt="image-20210625183443765"></p>
<h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625183511.png" alt="image-20210625183511851"></p>
<h3 id="适用条件"><a href="#适用条件" class="headerlink" title="适用条件"></a>适用条件</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625183528.png" alt="image-20210625183528152"></p>
<h3 id="模式应用-4"><a href="#模式应用-4" class="headerlink" title="模式应用"></a>模式应用</h3><h3 id="外观模式应用于JDBC数据库操作"><a href="#外观模式应用于JDBC数据库操作" class="headerlink" title="外观模式应用于JDBC数据库操作"></a>外观模式应用于JDBC数据库操作</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625183633.png" alt="image-20210625183633838" style="zoom:50%;" />

<h3 id="Session外观模式是外观模式在Java-EE框架中的应用"><a href="#Session外观模式是外观模式在Java-EE框架中的应用" class="headerlink" title="Session外观模式是外观模式在Java EE框架中的应用"></a>Session外观模式是外观模式在Java EE框架中的应用</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625183655.png" alt="image-20210625183655913"></p>
<h2 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-电源总开关"><a href="#e1-电源总开关" class="headerlink" title="e1.电源总开关"></a>e1.电源总开关</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210628184611.png" alt="image-20210625183306305" style="zoom:50%;" />

<h3 id="e2-文件加密"><a href="#e2-文件加密" class="headerlink" title="e2.文件加密"></a>e2.文件加密</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625183400.png" alt="image-20210625183400377" style="zoom:67%;" />



<h2 id="模式拓展-4"><a href="#模式拓展-4" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="一个系统多个外观类"><a href="#一个系统多个外观类" class="headerlink" title="一个系统多个外观类"></a>一个系统多个外观类</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625183902.png" alt="image-20210625183902346"></p>
<h3 id="不要试图通过外观类为子系统增加新行为"><a href="#不要试图通过外观类为子系统增加新行为" class="headerlink" title="不要试图通过外观类为子系统增加新行为"></a>不要试图通过外观类为子系统增加新行为</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625183945.png" alt="image-20210625183945733"></p>
<h3 id="外观模式与迪米特法则"><a href="#外观模式与迪米特法则" class="headerlink" title="外观模式与迪米特法则"></a>外观模式与迪米特法则</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625184019.png" alt="image-20210625184019569"></p>
<h3 id="抽象外观类"><a href="#抽象外观类" class="headerlink" title="抽象外观类"></a>抽象外观类</h3><p>在外观模式中，当增加或移除子系统时需要修改外观类，这违背了“开闭原则”。如果引入抽象外观类，则在一定程度上解决了该问题。</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625184109.png" alt="image-20210625184109149" style="zoom:50%;" />

<h1 id="享元模式-Flyweight-Pattern-对象结构型模式"><a href="#享元模式-Flyweight-Pattern-对象结构型模式" class="headerlink" title="享元模式(Flyweight Pattern)-对象结构型模式"></a>享元模式(Flyweight Pattern)-对象结构型模式</h1><h2 id="模式结构-10"><a href="#模式结构-10" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625184444.png" alt="image-20210625184444549" style="zoom:67%;" />

<h2 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>Use <strong>sharing</strong> to support large numbers of <strong>fine-grained</strong> objects efficiently</p>
<p>运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象， 而这些对象都很相似，状态变化很小，可以实现对象的多次复用</p>
<h3 id="模式结构-11"><a href="#模式结构-11" class="headerlink" title="模式结构"></a>模式结构</h3><p>Flyweight: 抽象享元类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部状态作为成员属性 private String intrinsicState;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Flyweight</span><span class="params">(String intrinsicState)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.intrinsicState = intrinsicState; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String extrinsicState)</span> </span>&#123;</span><br><span class="line">		......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConcreteFlyweight: 具体享元类</p>
<p>UnsharedConcreteFlyweight: 非共享具体享元类</p>
<p>FlyweightFactory: 享元工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> HashMap flyweights = <span class="keyword">new</span> HashMap();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(flyweights.containsKey(key))</span><br><span class="line">    &#123; </span><br><span class="line">       <span class="keyword">return</span> (Flyweight)flyweights.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; </span><br><span class="line">       Flyweight fw = <span class="keyword">new</span> ConcreteFlyweight();</span><br><span class="line">       flyweights.put(key,fw); </span><br><span class="line">       <span class="keyword">return</span> fw;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模式分析-3"><a href="#模式分析-3" class="headerlink" title="模式分析"></a>模式分析</h3><ol>
<li>享元模式是一个考虑系统性能的设计模式， 通过使用享元模式可以节约内存空间，提高系统的性能。</li>
<li>享元模式的核心在于享元工厂类，享元工厂类的作用 在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在， 则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象</li>
<li>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态(Internal State)和外部状态(External State)。<ol>
<li>内部状态是存储在享元对象内部并且不会随着环境变化为变化的状态</li>
<li>外部状态是随环境改变而改变的，不可以共享的状态</li>
</ol>
</li>
</ol>
<h3 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625190453.png" alt="image-20210625190453699" style="zoom:50%;" />

<h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625190438.png" alt="image-20210625190438034" style="zoom:50%;" />

<h3 id="适用环境-3"><a href="#适用环境-3" class="headerlink" title="适用环境"></a>适用环境</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625190537.png" alt="image-20210625190537677" style="zoom:50%;" />

<h3 id="模式应用-5"><a href="#模式应用-5" class="headerlink" title="模式应用"></a>模式应用</h3><ol>
<li>编辑器软件</li>
<li>JDK String</li>
</ol>
<h2 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-共享网络设备（无外部状态）"><a href="#e1-共享网络设备（无外部状态）" class="headerlink" title="e1.共享网络设备（无外部状态）"></a>e1.共享网络设备（无外部状态）</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625190245.png" alt="image-20210625190245437" style="zoom: 67%;" />

<h3 id="e2-共享网络设备（有外部状态）"><a href="#e2-共享网络设备（有外部状态）" class="headerlink" title="e2.共享网络设备（有外部状态）"></a>e2.共享网络设备（有外部状态）</h3><img src="/Users/xuyuxuan/Library/Application Support/typora-user-images/image-20210625190311805.png" alt="image-20210625190311805" style="zoom:67%;" />

<h2 id="模式拓展-5"><a href="#模式拓展-5" class="headerlink" title="模式拓展"></a>模式拓展</h2><h3 id="单纯享元模式，"><a href="#单纯享元模式，" class="headerlink" title="单纯享元模式，"></a>单纯享元模式，</h3><p>这种享元模式中的所有的具体享元类都是可以共享的，<strong>不存在非共享的具体享元类</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625190824.png" alt="image-20210625190824716"></p>
<h3 id="复合享元模式"><a href="#复合享元模式" class="headerlink" title="复合享元模式"></a>复合享元模式</h3><p>这种享元模式中的有些享元对象是由一些单纯享元对象组合而成的，它们就是复合享元对象。虽然复合享元对象本身不能共享，但它们可以分解成单纯享元对象再被共享</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625190917.png" alt="image-20210625190917352" style="zoom:67%;" />

<h3 id="模式联用"><a href="#模式联用" class="headerlink" title="模式联用"></a>模式联用</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625190949.png" alt="image-20210625190949487"></p>
<h1 id="代理模式-Proxy-Pattern-对象结构型模式"><a href="#代理模式-Proxy-Pattern-对象结构型模式" class="headerlink" title="代理模式(Proxy Pattern)-对象结构型模式"></a>代理模式(Proxy Pattern)-对象结构型模式</h1><h2 id="模式结构-12"><a href="#模式结构-12" class="headerlink" title="模式结构"></a>模式结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625192725.png" alt="image-20210625192725628" style="zoom:67%;" />

<h2 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>Provide a <strong>surrogate or placeholder</strong> for <strong>another</strong> object to <strong>control access to it.</strong></p>
<h3 id="模式结构-13"><a href="#模式结构-13" class="headerlink" title="模式结构"></a>模式结构</h3><p>Subject：抽象主题角色</p>
<p>Proxy：代理主题角色</p>
<p>RealSubject：真实主题角色</p>
<h3 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625193130.png" alt="image-20210625193130049" style="zoom:50%;" />

<h3 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h3><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625193207.png" alt="image-20210625193207039"></p>
<h3 id="模式应用-6"><a href="#模式应用-6" class="headerlink" title="模式应用"></a>模式应用</h3><p>EJB、Web Service等分布式技术都是代理模式的应用</p>
<h2 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h2><h3 id="e1-论坛权限控制代理"><a href="#e1-论坛权限控制代理" class="headerlink" title="e1.论坛权限控制代理"></a>e1.论坛权限控制代理</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625192944.png" alt="image-20210625192944089" style="zoom:50%;" />

<h3 id="e2-数学运算代理"><a href="#e2-数学运算代理" class="headerlink" title="e2.数学运算代理"></a>e2.数学运算代理</h3><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625193052.png" alt="image-20210625193051978" style="zoom:50%;" />

<h2 id="模式拓展-6"><a href="#模式拓展-6" class="headerlink" title="模式拓展"></a>模式拓展</h2><ol>
<li><p>远程代理</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210625193600.png" alt="image-20210625193600517"></p>
</li>
<li><p>虚拟代理：延迟操作（通过代理技术结合多线程编程将真实图片的加载放到后台来操作，不影响前台图片的浏览）</p>
</li>
<li><p>copy-on-write代理：虚拟代理的一种</p>
</li>
<li><p>保护代理：不同权限</p>
</li>
<li><p>缓冲代理：提供临时存储空间</p>
</li>
<li><p>防火墙代理</p>
</li>
<li><p>智能引用代理：记录对象被调用次数等</p>
</li>
</ol>
]]></content>
      <categories>
        <category>NJUSE课程</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC操作数据库</title>
    <url>/2021/07/08/JDBC%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="JDBC例子"><a href="#JDBC例子" class="headerlink" title="JDBC例子"></a>JDBC例子</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建链接</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/TEST&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            <span class="comment">//数据库操作对象</span></span><br><span class="line">            statement= conn.createStatement();</span><br><span class="line">            <span class="comment">//执行sql</span></span><br><span class="line">            String sql=<span class="string">&quot;insert into user(user_id,dep_id,salary) values(1,2,3)&quot;</span>;</span><br><span class="line">            <span class="comment">//返回值是影响了数据库中的记录的条数</span></span><br><span class="line">            <span class="keyword">int</span> count=statement.executeUpdate(sql);</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><p>数据库连接-执行-释放，连接释放十分浪费系统资源</p>
<p><strong>池化技术：准备一些预先的资源，过来就连接预先准备好的</strong></p>
<p>设置最小连接数和最大连接数，设置超时处理；</p>
<p>编写连接池，实现DataSource的接口</p>
<blockquote>
<p>开源数据源实现：</p>
<p>DBCP</p>
<p>C3P0</p>
<p>Druid(阿里巴巴)</p>
</blockquote>
<p>使用了这些链接库后，项目开发过程中就不需要编写连接数据库的代码了。</p>
<h1 id="Spring-JDBCTemplate例子"><a href="#Spring-JDBCTemplate例子" class="headerlink" title="Spring JDBCTemplate例子"></a>Spring JDBCTemplate例子</h1><p><strong>整体的目录结构：</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210708131155.png" alt="image-20210708131154800" style="zoom:33%;" />

<p><strong>database</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210708131401.png" alt="image-20210708131401494" style="zoom:33%;" />

<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JDBCTemplate<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>context.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;JDBCtempalte&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/TEST&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>user</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBCtempalte.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">user</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> user_id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dep_id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUser_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_id</span><span class="params">(<span class="keyword">int</span> user_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user_id = user_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDep_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dep_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDep_id</span><span class="params">(<span class="keyword">int</span> dep_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dep_id = dep_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>userDAO</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBCtempalte.DAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> JDBCtempalte.domain.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(user user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> user_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(user user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">user <span class="title">findOne</span><span class="params">(<span class="keyword">int</span> user_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;user&gt; <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> salary)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>userDAOImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBCtempalte.DAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> JDBCtempalte.domain.user;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;userDAOImpl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userDAOImpl</span> <span class="keyword">implements</span> <span class="title">userDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(user user)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;insert into user values(?,?,?)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,user.getUser_id(),user.getDep_id(),user.getSalary());</span><br><span class="line">        System.out.println(<span class="string">&quot;add user success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> user_id)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;delete from user where user_id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,user_id);</span><br><span class="line">        System.out.println(<span class="string">&quot;delete user &quot;</span>+user_id+<span class="string">&quot; success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(user user)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;update user set user_id=?,dep_id=?,salary=?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> update=jdbcTemplate.update(sql,user.getUser_id(),user.getDep_id(),user.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> user <span class="title">findOne</span><span class="params">(<span class="keyword">int</span> user_id)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from user where user_id=?&quot;</span>;</span><br><span class="line">        user x=jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(user.class),user_id);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;user&gt; <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from user where salary&lt;=?&quot;</span>;</span><br><span class="line">        List&lt;user&gt; users=jdbcTemplate.query(sql,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(user.class),salary);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>userService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBCtempalte.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> JDBCtempalte.DAO.userDAO;</span><br><span class="line"><span class="keyword">import</span> JDBCtempalte.domain.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> userDAO userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(user user)</span></span>&#123;</span><br><span class="line">        userDAO.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> user_id)</span></span>&#123;</span><br><span class="line">        userDAO.delete(user_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> user <span class="title">findOne</span><span class="params">(<span class="keyword">int</span> user_id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO.findOne(user_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;user&gt; <span class="title">findAll</span><span class="params">(<span class="keyword">int</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO.findAll(salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>userTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> JDBCtempalte.domain.user;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> JDBCtempalte.service.userService;</span><br><span class="line"><span class="keyword">import</span> JDBCtempalte.domain.user;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:context.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    userService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        user user=<span class="keyword">new</span> user();</span><br><span class="line">        user.setUser_id(<span class="number">167</span>);</span><br><span class="line">        user.setDep_id(<span class="number">167</span>);</span><br><span class="line">        user.setSalary(<span class="number">1670</span>);</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> user_id=<span class="number">167</span>;</span><br><span class="line">        userService.deleteUser(user_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> user_id=<span class="number">5</span>;</span><br><span class="line">        user user=userService.findOne(user_id);</span><br><span class="line">        assertEquals(<span class="number">2</span>, user.getDep_id());</span><br><span class="line">        assertEquals(<span class="number">3</span>, user.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> salary=<span class="number">3</span>;</span><br><span class="line">        List&lt;user&gt; users=userService.findAll(salary);</span><br><span class="line">        <span class="keyword">for</span>(user user:users)&#123;</span><br><span class="line">            System.out.println(user.getUser_id());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis入门</title>
    <url>/2021/07/09/mybatis%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h1><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210708191853.png" alt="image-20210708191852974" style="zoom:33%;" />

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>UserDAO</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line">    <span class="comment">//get all users</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;Mapper.UserDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>mybatisUtil</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mybatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Mybatis-config.xml</strong></p>
<p>XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）<br>以及决定事务作用域和控制方式的事务管理器（TransactionManager</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/TEST&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>UserDAOTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> utils.mybatisUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAOTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserDAO userDAO=sqlSession.getMapper(UserDAO.class);</span><br><span class="line">        List&lt;User&gt; users=userDAO.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">            System.out.println(user.getUser_id());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><p><strong>UserMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//get all users</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> user_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> user_id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;Mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from user where user_id =#&#123;user_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span> &gt;</span></span><br><span class="line">        insert into user (user_id,dep_id,salary) values (#&#123;user_id&#125;,#&#123;dep_id&#125;,#&#123;salary&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">        update user set dep_id=#&#123;dep_id&#125;,salary=#&#123;salary&#125; where user_id=#&#123;user_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where user_id=#&#123;user_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> utils.mybatisUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users= userMapper.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user= userMapper.getUser(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setUser_id(<span class="number">6</span>);</span><br><span class="line">        user.setDep_id(<span class="number">6</span>);</span><br><span class="line">        user.setSalary(<span class="number">6</span>);</span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setUser_id(<span class="number">6</span>);</span><br><span class="line">        user.setDep_id(<span class="number">6</span>);</span><br><span class="line">        user.setSalary(<span class="number">7</span>);</span><br><span class="line">        userMapper.updateUser(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        userMapper.deleteUser(<span class="number">6</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Mybatis-Spring"><a href="#Mybatis-Spring" class="headerlink" title="Mybatis-Spring"></a>Mybatis-Spring</h1><p><strong>spring配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;domain&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;Mapper&quot;</span>/&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/TEST&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span> /&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mapper/*.xml&quot;</span>/&gt;</span>    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span>        <span class="comment">&lt;!--只能用构造器注入因为没有set方法--&gt;</span>        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span>    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Mapper.UserMapperImpl&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span>    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Impl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;<span class="keyword">import</span> domain.User;<span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="keyword">import</span> java.util.List;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;        UserMapper userMapper=sqlSessionTemplate.getMapper(UserMapper.class);        <span class="keyword">return</span> userMapper.getUsers();    &#125;       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>&#123;        <span class="keyword">this</span>.sqlSessionTemplate=sqlSessionTemplate;    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;context.xml&quot;</span>);        UserMapper userMapper=context.getBean(<span class="string">&quot;userMapper&quot;</span>,UserMapper.class);        List&lt;User&gt; users=userMapper.getUsers();        <span class="keyword">for</span> (User user:users)            System.out.println(user);    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>[1]</strong> <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<p><strong>[2]</strong> <a href="http://mybatis.org/spring/zh/index.html">http://mybatis.org/spring/zh/index.html</a></p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC入门</title>
    <url>/2021/07/09/SpringMVC%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="SpringMVC请求原理"><a href="#SpringMVC请求原理" class="headerlink" title="SpringMVC请求原理"></a>SpringMVC请求原理</h1><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210710162337.png" alt="image-20210710162337090"></p>
<ul>
<li>在请求离开浏览器时➊,会带有用户所请求内容的信息，至少会包含请求的URL，但是还可能带有其他的信息，例如用户提交的表单信息。</li>
<li>请求旅程的第一站是Spring的DispatcherServlet。与大多数基于Java的Web框架一样，SpringMVC所有的请求都会通过一个前端控制器(front controller)Servlet。前端控制器是常用的Web应用程序模式，在这里一个单实例的Servlet将请求委托给应用程序的其他组件来执行实际的处理。在Spring MVC中，DispatcherServlet就是前端控制器。</li>
<li>DispatcherServlet的任务是将请求发送给Spring MVC控制器(controller)。 控制器是一个用于处理请求的Spring 组件。在典型的应用程序中可能会有多个控制器，DispatcherServlet需要知道应该将请求发送给哪个控制器。所以DispatcherServlet会查询一个或多个处理器映射(handler mapping)❷来确定请求的下一站在哪里。处理器映射会根据请求所携带的URL信息来进行决策。</li>
<li>一旦选择了合适的控制器，DispatcherServlet会将请求发送给选中的控制器❸。到了控制器，请求会卸下其负载(用户提交的信息)并耐心等待控制器处理这些信息。(实际上，设计良好的控制器本身只处理很少甚至不处理工作，而是将业务逻辑委托给一个或多个服务对象进行处理。)</li>
<li>控制器在完成逻辑处理后，通常会产生一些信息，这些信息需要返回给用户并在浏览器上显示。这些信息被称为模型(model)。 不过仅仅给用户返回原始的信息是不够的——这些信息需要以用户友好的方式进行格式化，一般会是HTML。所以，信息需要发送给一个视图(view)， 通常会是JSP。</li>
<li>控制器所做的最后一件事就是将模型数据打包，并且标示出用于渲染输出的视图名。它接下来会将请求连同模型和视图名发送回DispatcherServlet❹。</li>
<li>这样，控制器就不会与特定的视图相耦合，传递DispatcherServlet的视图名并不直接表示某个特定的JSP。实际上，它甚至并不能确定视图就是JSP。相反，它仅仅传递了一个逻辑名称，这个名字将会用来查找产生结果的真正视图。DispatcherServlet将会使用视图解析器(view resolver)❺来将逻辑视图名匹配为一个特定的视图实现，它可能是也可能不是JSP。</li>
<li>既然DispatcherServlet已经知道由哪个视图渲染结果，那请求的任务基本上也就完成了。它的最后一站是视图的实现(可能是JSP)❺,在这里它交付模型数据。请求的任务就完成了。视图将使用模型数据渲染输出，这个输出会通过响应对象传递给客户端❼。</li>
</ul>
<h1 id="HelloSpringMVC-无注解"><a href="#HelloSpringMVC-无注解" class="headerlink" title="HelloSpringMVC(无注解)"></a>HelloSpringMVC(无注解)</h1><p><strong>目录结构</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210710174807.png" alt="image-20210710174807028" style="zoom:25%;" />

<p><strong>springmvc-servlet.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        String res=<span class="string">&quot;hello spring mvc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部署使用的是idea内置的tomcat</p>
<p>这里记录一个404bug，注意检查自己的out里的artifact目录下到底有没有lib文件夹，没有的话可以手动添加一下。</p>
<img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210710174301.png" alt="image-20210710174301818" style="zoom:50%;" />

<h1 id="HelloSpringMVC-注解"><a href="#HelloSpringMVC-注解" class="headerlink" title="HelloSpringMVC(注解)"></a>HelloSpringMVC(注解)</h1><p><strong>springmvc-servlet.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello springMVC Annotion&quot;</span>);</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>; <span class="comment">//会被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210709181229.png</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis操作数据库</title>
    <url>/2021/07/08/mybatis%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h1><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/20210708191853.png" alt="image-20210708191852974" style="zoom:33%;" />

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>UserDAO</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line">    <span class="comment">//get all users</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;Mapper.UserDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>mybatisUtil</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mybatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Mybatis-config.xml</strong></p>
<p>XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）<br>以及决定事务作用域和控制方式的事务管理器（TransactionManager</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/TEST&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;Mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>UserDAOTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> utils.mybatisUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAOTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserDAO userDAO=sqlSession.getMapper(UserDAO.class);</span><br><span class="line">        List&lt;User&gt; users=userDAO.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">            System.out.println(user.getUser_id());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><p><strong>UserMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//get all users</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> user_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> user_id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;Mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from user where user_id =#&#123;user_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span> &gt;</span></span><br><span class="line">        insert into user (user_id,dep_id,salary) values (#&#123;user_id&#125;,#&#123;dep_id&#125;,#&#123;salary&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;domain.User&quot;</span>&gt;</span></span><br><span class="line">        update user set dep_id=#&#123;dep_id&#125;,salary=#&#123;salary&#125; where user_id=#&#123;user_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where user_id=#&#123;user_id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> utils.mybatisUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users= userMapper.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user= userMapper.getUser(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setUser_id(<span class="number">6</span>);</span><br><span class="line">        user.setDep_id(<span class="number">6</span>);</span><br><span class="line">        user.setSalary(<span class="number">6</span>);</span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setUser_id(<span class="number">6</span>);</span><br><span class="line">        user.setDep_id(<span class="number">6</span>);</span><br><span class="line">        user.setSalary(<span class="number">7</span>);</span><br><span class="line">        userMapper.updateUser(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= mybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        userMapper.deleteUser(<span class="number">6</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Mybatis-Spring"><a href="#Mybatis-Spring" class="headerlink" title="Mybatis-Spring"></a>Mybatis-Spring</h1><p><strong>spring配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;domain&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;Mapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/TEST&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:Mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能用构造器注入因为没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Impl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper userMapper=sqlSessionTemplate.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionTemplate=sqlSessionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;context.xml&quot;</span>);</span><br><span class="line">    UserMapper userMapper=context.getBean(<span class="string">&quot;userMapper&quot;</span>,UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users=userMapper.getUsers();</span><br><span class="line">    <span class="keyword">for</span> (User user:users)</span><br><span class="line">        System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>[1]</strong> <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<p><strong>[2]</strong> <a href="http://mybatis.org/spring/zh/index.html">http://mybatis.org/spring/zh/index.html</a></p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
</search>
