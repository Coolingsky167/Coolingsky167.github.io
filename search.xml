<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA collection</title>
    <url>/2021/03/19/JAVA-collection/</url>
    <content><![CDATA[<p>本篇介绍Java collection接口下的几种常用数据结构</p>
<a id="more"></a>

<h1 id="1-整体架构"><a href="#1-整体架构" class="headerlink" title="1. 整体架构"></a>1. 整体架构</h1><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151412198.png" alt="image-20210324151412198"></p>
<h1 id="2-Set"><a href="#2-Set" class="headerlink" title="2. Set"></a>2. Set</h1><p>Set继承于Collection接口，是一个不允许出现重复元素，并且无序的集合，主要有HashSet和TreeSet两大实现类。</p>
<h2 id="2-1-HashSet"><a href="#2-1-HashSet" class="headerlink" title="2.1 HashSet"></a>2.1 HashSet</h2><ul>
<li>不允许出现重复因素；<ul>
<li>在向HashMap中添加元素时，先判断key的hashCode值是否相同，如果相同，则调用equals()、==进行判断，若相同则覆盖原有元素；如果不同，则直接向Map中添加元素；</li>
</ul>
</li>
<li>允许插入Null值；</li>
<li>元素无序（添加顺序和遍历顺序不一致）；</li>
<li>线程不安全，若2个线程同时操作HashSet，必须通过代码实现同步；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合：</span></span><br><span class="line">        Set&lt;String&gt; hashSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet初始容量大小：&quot;</span>+hashSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素添加：</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;my&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;is&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet容量大小：&quot;</span>+hashSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器遍历：</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = hashSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            String str = iterator.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增强for循环</span></span><br><span class="line">        <span class="keyword">for</span>(String str:hashSet)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Coolingsky&quot;</span>.equals(str))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;get Coolingsky:&quot;</span>+str);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素删除：</span></span><br><span class="line">        hashSet.remove(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet元素大小：&quot;</span> + hashSet.size());</span><br><span class="line">        hashSet.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet元素大小：&quot;</span> + hashSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合判断：</span></span><br><span class="line">        <span class="keyword">boolean</span> isEmpty = hashSet.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet是否为空：&quot;</span> + isEmpty);</span><br><span class="line">        <span class="keyword">boolean</span> isContains = hashSet.contains(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet是否包含&#x27;hello&#x27;：&quot;</span> + isContains);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-2-TreeSet"><a href="#2-2-TreeSet" class="headerlink" title="2.2 TreeSet"></a>2.2 TreeSet</h2><ul>
<li>对插入的元素进行排序，是一个有序的集合（主要与HashSet的区别）;</li>
<li>底层使用红黑树结构，而不是哈希表结构；</li>
<li>允许插入Null值；</li>
<li>不允许插入重复元素；</li>
<li>线程不安全；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">treeset</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet初始化容量大小：&quot;</span>+treeSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素添加：</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;my&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet容量大小：&quot;</span> + treeSet.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet元素顺序为：&quot;</span> + treeSet.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加for循环遍历：</span></span><br><span class="line">        <span class="keyword">for</span>(String str:treeSet)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;遍历元素：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器遍历：升序</span></span><br><span class="line">        Iterator&lt;String&gt; iteratorAesc = treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iteratorAesc.hasNext())&#123;</span><br><span class="line">            String str = iteratorAesc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;遍历元素升序：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器遍历：降序</span></span><br><span class="line">        Iterator&lt;String&gt; iteratorDesc = treeSet.descendingIterator();</span><br><span class="line">        <span class="keyword">while</span>(iteratorDesc.hasNext())&#123;</span><br><span class="line">            String str = iteratorDesc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;遍历元素降序：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素获取:实现NavigableSet接口</span></span><br><span class="line">        String firstEle = treeSet.first();<span class="comment">//获取TreeSet头节点：</span></span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet头节点为：&quot;</span> + firstEle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定元素之前的所有元素集合：(不包含指定元素)</span></span><br><span class="line">        SortedSet&lt;String&gt; headSet = treeSet.headSet(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Coolingsky节点之前的元素为：&quot;</span>+headSet.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取给定元素之间的集合：（包含头，不包含尾）</span></span><br><span class="line">        SortedSet subSet = treeSet.subSet(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1--world之间节点元素为：&quot;</span>+subSet.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合判断：</span></span><br><span class="line">        <span class="keyword">boolean</span> isEmpty = treeSet.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet是否为空：&quot;</span>+isEmpty);</span><br><span class="line">        <span class="keyword">boolean</span> isContain = treeSet.contains(<span class="string">&quot;who&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet是否包含who元素：&quot;</span>+isContain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//元素删除：</span></span><br><span class="line">        <span class="keyword">boolean</span> CoolingskyRemove = treeSet.remove(<span class="string">&quot;Coolingsky&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Coolingsky元素是否被删除 &quot;</span>+CoolingskyRemove);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合中不存在的元素，删除返回false</span></span><br><span class="line">        <span class="keyword">boolean</span> whoRemove = treeSet.remove(<span class="string">&quot;who&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;who元素是否被删除 &quot;</span>+whoRemove);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除并返回第一个元素：如果set集合不存在元素，则返回null</span></span><br><span class="line">        String pollFirst = treeSet.pollFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除的第一个元素：&quot;</span>+pollFirst);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除并返回最后一个元素：如果set集合不存在元素，则返回null</span></span><br><span class="line">        String pollLast = treeSet.pollLast();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除的最后一个元素：&quot;</span>+pollLast);</span><br><span class="line"></span><br><span class="line">        treeSet.clear();<span class="comment">//清空集合:</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>//To be continued..</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins配置</title>
    <url>/2021/03/16/Jenkins%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>官方文档路径：<a href="https://www.jenkins.io/zh/doc/book/installing/">https://www.jenkins.io/zh/doc/book/installing/</a></p>
<h2 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1. 实验目的"></a>1. 实验目的</h2><p>本次试验将采用一个简单的maven项目，通过在docker上拉取Jenkins镜像，并且在docker中配置Tomcat，自动拉取Gitlab的代码，实现持续集成。</p>
<a id="more"></a>

<h2 id="2-什么是CI"><a href="#2-什么是CI" class="headerlink" title="2. 什么是CI"></a>2. 什么是CI</h2><p>持续集成(Continuous integration)是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>
<h2 id="3-操作流程"><a href="#3-操作流程" class="headerlink" title="3. 操作流程"></a>3. 操作流程</h2><h3 id="3-1-安装docker"><a href="#3-1-安装docker" class="headerlink" title="3.1 安装docker"></a>3.1 安装docker</h3><p>本人使用的是腾讯云服务器，操作系统是ubuntu18.04.4 LTS</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install docker </span><br></pre></td></tr></table></figure>

<p>ps. 具体怎么安装有点忘了 不行自己搜索”ubuntu docker安装”</p>
<h3 id="3-2-拉取Jenkins镜像"><a href="#3-2-拉取Jenkins镜像" class="headerlink" title="3.2 拉取Jenkins镜像"></a>3.2 拉取Jenkins镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:8080 jenkinsci/blueocean</span><br></pre></td></tr></table></figure>

<p>此时系统中应该已经有jenkins的镜像，为了给后面Tomcat也留个端口，可以添加一些端口以便使用.</p>
<p>把下面这个加到上面的指令中，因为水平有限，一旦容器创建就不会再添加端口映射了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p 8088:8088</span><br></pre></td></tr></table></figure>

<p>查看系统中已经有的镜像&amp;存在的容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151451460.png" alt="image-20210324151451460"></p>
<p>如果想要为Jenkins镜像再创建容器：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> &#123;IMAGE ID&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-访问8080端口"><a href="#3-3-访问8080端口" class="headerlink" title="3.3 访问8080端口"></a>3.3 访问8080端口</h3><p>此时启动创建好的镜像，访问8080端口。（服务器就公网ip:8080,本地就localhost）</p>
<p>这时候会有一个一长串的码，他会提示你位置，复制位置cat输出一下就可以，然后按照指示创建账号。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151506345.png" alt="image-20210324151506345"></p>
<p>根据创建好的账号登录即可。</p>
<h3 id="3-4-配置Maven"><a href="#3-4-配置Maven" class="headerlink" title="3.4 配置Maven"></a>3.4 配置Maven</h3><p>容器内是自带JDK环境的，可以 java -version确认一下</p>
<p>进入容器内部指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -ti --user root &#123;容器id&#125; sh</span><br></pre></td></tr></table></figure>



<p>下载maven，安装到任意路径下，配置环境变量（相关知识自行搜索maven安装）</p>
<p>我这里把maven安装到了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151526445.png" alt="image-20210324151526445"></p>
<p>这里我可能走了弯路，我是通过scp指令先将maven安装包发到服务器上，再通过docker cp将文件复制进去解压缩等。</p>
<p>配置环境变量(一定要添加在下面，我也不知道为啥，反正写在前面死活不行)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151538447.png" alt="image-20210324151538447"></p>
<p>注意：maven最好换个源（到maven路径下找到conf/settings.xml）直接把它删了替换成同名文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-到Jenkins中再配置配置"><a href="#3-5-到Jenkins中再配置配置" class="headerlink" title="3.5 到Jenkins中再配置配置"></a>3.5 到Jenkins中再配置配置</h3><h4 id="3-5-1-系统管理-全局工具配置"><a href="#3-5-1-系统管理-全局工具配置" class="headerlink" title="3.5.1 系统管理-全局工具配置"></a>3.5.1 系统管理-全局工具配置</h4><p>查找某个环境变量位置可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>

<h5 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h5><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151607702.png" alt="image-20210324151607702"></p>
<h5 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h5><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151633074.png" alt="image-20210324151633074"></p>
<h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151643485.png" alt="image-20210324151643485"></p>
<h4 id="3-5-1-系统管理-系统配置"><a href="#3-5-1-系统管理-系统配置" class="headerlink" title="3.5.1 系统管理-系统配置"></a>3.5.1 系统管理-系统配置</h4><p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151659247.png" alt="image-20210324151659247"></p>
<h3 id="3-6-Gitlab上整一个Maven项目"><a href="#3-6-Gitlab上整一个Maven项目" class="headerlink" title="3.6 Gitlab上整一个Maven项目"></a>3.6 Gitlab上整一个Maven项目</h3><p>到Jenkins上新建任务-流水线，我们可以先试一下，选择应用保存。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151737342.png" alt="image-20210324151737342"></p>
<p>点击“立即构建”。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151756143.png" alt="image-20210324151756143"></p>
<p>构建完成，并且可以到控制台查看输出 。</p>
<p>好了。下面我们实现三个功能：</p>
<ol>
<li>从gitlab拉取代码</li>
<li>maven构建打成war包</li>
<li>部署到Tomcat服务器</li>
</ol>
<p>值得高兴的是，Jenkins给了一个超级好用的功能，自动生成流水线脚本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151824044.png" alt="image-20210324151824044"></p>
<p>点击“流水线语法”，我们开始（分别对应上述三个阶段）：</p>
<ol>
<li>在Repoitory中填写自己gitlab的“clone”的http连接，在Credentials中添加自己的账户密码</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151839432.png" alt="image-20210324151839432"></p>
<ol start="2">
<li>shell命令 maven clean package (p.s. maven相关知识自己去学习)</li>
<li>在credentials中添加自己tomcat管理员的账号密码。具体添加方法百度。在Tomcat URL中添加自己的tomcat地址。（一般情况下是8080，我这里把tomcat文件也放到了docker同一个容器中，所以8080冲突，就把端口改成了8088）</li>
</ol>
<p>p.s 这里关于tomcat的操作大概有添加管理员，改端口两步。具体步骤就…（自己做的时候一点一点搜下来，没想到写成博客要这么多，懒了，这里不难）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/bed/image-20210324151850753.png" alt="image-20210324151850753"></p>
<p>之后到ip:端口访问tomcat 到web-app里找，就可以访问啦。</p>
]]></content>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode新手村(1)</title>
    <url>/2021/03/23/leetcode%E6%96%B0%E6%89%8B%E6%9D%91-1/</url>
    <content><![CDATA[<h2 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h2><ol>
<li>#141 <a href="https://leetcode-cn.com/problems/linked-list-cycle/">环形链表</a></li>
</ol>
<ul>
<li>看待这道题的第一个思路是弄一个hashset，遍历一次链表，扫到一个就加一个，碰到已经存在的就说明有环</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasCycle = <span class="keyword">false</span>;</span><br><span class="line">        ListNode current = head;</span><br><span class="line">        Set&lt;ListNode&gt; Nodeset = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span>(current!=<span class="keyword">null</span>&amp;&amp;current.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Nodeset.contains(current))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Nodeset.add(current);</span><br><span class="line">            current=current.next;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasCycle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>想着双指针 就想到的一个离谱的方法 想象一下你和另外一个人从宿舍到操场上跑步 操场是一个环 只要你们速度不一样 就一定会相遇…</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode fast=head;</span><br><span class="line">        ListNode slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span>&amp;&amp;fast.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个思路的差距还是明显的。</p>
<p>然后就看题解，看到提出找到入环点的问题，然后搜了一堆，发现乱七八糟没看懂。</p>
<p>后来意外的发现这就是#142题，难度是中等，<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/linked-list-cycle-ii-kuai-man-zhi-zhen-shuang-zhi-/">评论有个题解</a>非常的清晰，比网上一堆博客清晰多了。这里暂时先不写。（p.s. 我的同学说他面试鹅厂的时候考到了这个（2021春招））</p>
<h2 id="题2"><a href="#题2" class="headerlink" title="题2"></a>题2</h2><ol start="2">
<li>#344 <a href="https://leetcode-cn.com/problems/reverse-string/">反转字符串</a></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=s.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            temp=s[left];</span><br><span class="line">            s[left]=s[right];</span><br><span class="line">            s[right]=temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="题3"><a href="#题3" class="headerlink" title="题3"></a>题3</h2><ol start="3">
<li>#881 <a href="https://leetcode-cn.com/problems/boats-to-save-people/">救生艇</a></li>
</ol>
<p>我的思路是先快速排序，再从两边向中间组队坐船，顺带着复习一波排序，结果还就那个离谱..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRescueBoats</span><span class="params">(<span class="keyword">int</span>[] people, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        quicksort(people);</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=people.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">while</span> ( left&lt;right &amp;&amp; people[left]+people[right]&gt;limit)&#123;</span><br><span class="line">                right--;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (left&lt;right&amp;&amp;people[left]+people[right]&lt;=limit)&#123;</span><br><span class="line">                right--;</span><br><span class="line">                left++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left==right)</span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        doSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low&gt;=high)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left=low;</span><br><span class="line">        <span class="keyword">int</span> right=high;</span><br><span class="line">        <span class="keyword">int</span> pivot=arr[low];</span><br><span class="line">        <span class="comment">// 1 2</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">while</span> (left&lt;right&amp;&amp;arr[right]&gt;pivot)&#123; <span class="comment">//注意left&lt;right</span></span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left&gt;=right)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tem=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=tem;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right&amp;&amp;arr[left]&lt;pivot)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left&gt;=right)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tem=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=tem;</span><br><span class="line">        &#125;</span><br><span class="line">        doSort(arr,low,left-<span class="number">1</span>); <span class="comment">//注意是pivot两侧</span></span><br><span class="line">        doSort(arr,left+<span class="number">1</span>,high);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210327182459708.png" alt="image-20210327182459708"></p>
<p>所以更好的思路是：</p>
<p>其实思路是一样的…但是手写排序没必要..在排序后的处理上下面代码更优</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRescueBoats</span><span class="params">(<span class="keyword">int</span>[] people, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(people);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = people.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">if</span> (people[i] + people[j] &lt;= limit)</span><br><span class="line">                i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仅仅只是把自己的快速排序换成了Arrays封装的排序，速度就提升了将近40倍？？？</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210327182900393.png" alt="image-20210327182900393"></p>
<p>补充：</p>
<ol>
<li>给class实现一个comparator接口，就可以对象比较.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        size = s;</span><br><span class="line">        weight = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.size - o2.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>, <span class="number">50</span>);</span><br><span class="line">        Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">        Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>, <span class="number">40</span>);</span><br><span class="line">        Dog[] dogArray = &#123;d1, d2, d3&#125;;</span><br><span class="line">        Arrays.sort(dogArray, <span class="keyword">new</span> DogSizeComparator());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Arrays.sort()底层有一个阈值，之下用插入，之上用优化的快速排序（pivot的选择）</li>
</ol>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode新手村-2</title>
    <url>/2021/03/27/leetcode%E6%96%B0%E6%89%8B%E6%9D%91-2/</url>
    <content><![CDATA[<p>动态规划，面试官的法宝。</p>
<h2 id="题1-509"><a href="#题1-509" class="headerlink" title="题1 #509"></a>题1 #509</h2><p>#509 <a href="https://leetcode-cn.com/problems/fibonacci-number/">斐波那契数</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210327190223962.png" alt="image-20210327190223962"></p>
<p>emmm….递归慢，原因是做了很多重复计算，如果我们用空间换时间，把已经计算的结果记录下来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] book =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">300</span>];</span><br><span class="line">      <span class="comment">//用vector会更合适- -</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">300</span>;i++)&#123;</span><br><span class="line">            book[i]=-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doFib(book,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doFib</span><span class="params">(<span class="keyword">int</span>[] book,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (book[n]!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> book[n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            book[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;</span><br><span class="line">            book[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        book[n]=doFib(book,n-<span class="number">1</span>)+doFib(book,n-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> book[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public static void main(String[] args) &#123;</span></span><br><span class="line">    <span class="comment">//     Solution solution =new Solution();</span></span><br><span class="line">    <span class="comment">//     System.out.println(solution.fib(3));</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>![image-20210328170352274](/Users/xuyuxuan/Library/Application Support/typora-user-images/image-20210328170352274.png)</p>
<h2 id="题2-62"><a href="#题2-62" class="headerlink" title="题2 #62"></a>题2 #62</h2><p>#62 <a href="https://leetcode-cn.com/problems/unique-paths/">不同路径</a></p>
<p>首先想到的是用组合数做..mxn的格子一共需要走(M+N-2)步，只需要在这些步数中找出（M-1）步走下就行，也就是说需要C（M-1，M+N-2）就可以。</p>
<p>我本以为几分钟写完，结果没有搜到java内置的Math相关方法</p>
<p>自己写组合数计算公式疯狂越界，只能边求边化简..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> a=m+n-<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">long</span> b=m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b&gt;a/<span class="number">2</span>)&#123;</span><br><span class="line">            b=a-b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b;i++)&#123;</span><br><span class="line">            ans=ans*(a-i);</span><br><span class="line">            ans=ans/(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考虑利用动态规划的思想,递归处理，记录已经计算的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[][] arr=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">               arr[i][j]=-<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> func(arr,m,n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>[][] arr,<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[m-<span class="number">1</span>][n-<span class="number">1</span>]!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m==<span class="number">1</span>)&#123;</span><br><span class="line">            arr[m-<span class="number">1</span>][n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            arr[m-<span class="number">1</span>][n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[m-<span class="number">1</span>][n-<span class="number">1</span>]=func(arr,m-<span class="number">1</span>,n)+func(arr,m,n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再精简一点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题3-121"><a href="#题3-121" class="headerlink" title="题3 #121"></a>题3 #121</h2><p>暴力求解直接超时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;prices.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (prices[j]-prices[i]&gt;max)&#123;</span><br><span class="line">                    max=prices[j]-prices[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>arr[i]视作第i天卖的最大收入，显然等于price[i]-min{price[j]},j&lt;i</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=prices.length;</span><br><span class="line">        <span class="keyword">int</span>[] minPrice=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="comment">// minPrice[n]=min&#123;minPrice[n-1],price[n]&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">                minPrice[i]=prices[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                minPrice[i]=Math.min(minPrice[i-<span class="number">1</span>],prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] maxPrice=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="comment">// maxPrice[n]=prices[n]-minPrice[n]</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            maxPrice[i]=prices[i]-minPrice[i];</span><br><span class="line">            <span class="keyword">if</span> (maxPrice[i]&gt;ans)</span><br><span class="line">                ans=maxPrice[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是效果依旧不是很理想</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210329113233734.png" alt="image-20210329113233734">事实上我们不需数组来存储之前的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=prices.length;</span><br><span class="line">        <span class="keyword">int</span> minPrice=prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// maxPrice=max&#123;prices[n]-minPrice[n],maxPrice&#125;</span></span><br><span class="line">        <span class="keyword">int</span> maxPrice=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            minPrice=Math.min(minPrice,prices[i]);</span><br><span class="line">            <span class="keyword">if</span>(prices[i]-minPrice&gt;maxPrice)</span><br><span class="line">                maxPrice=prices[i]-minPrice;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxPrice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210329114607962.png" alt="image-20210329114607962"></p>
<h2 id="题4-70"><a href="#题4-70" class="headerlink" title="题4 #70"></a>题4 #70</h2><p>一维数组记笔记 没什么好说的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//f(n)=f(n-1)+f(n-2)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">return</span> doFunc(arr,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">doFunc</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[n-<span class="number">1</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[n-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            arr[n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">2</span>)&#123;</span><br><span class="line">            arr[n-<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[n-<span class="number">1</span>]=doFunc(arr,n-<span class="number">1</span>)+doFunc(arr,n-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210329115857194.png" alt="image-20210329115857194"></p>
<h2 id="题5-279"><a href="#题5-279" class="headerlink" title="题5 #279"></a>题5 #279</h2><h2 id="题6-221"><a href="#题6-221" class="headerlink" title="题6 #221"></a>题6 #221</h2>]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>便利蜂笔试</title>
    <url>/2021/03/20/%E4%BE%BF%E5%88%A9%E8%9C%82%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<p>2021-春招</p>
<p>便利蜂笔试回忆</p>
<a id="more"></a>

<p>15个选择（30分）+三道编程（70分）</p>
<p>选择题全是瞎猜的。。编程题感觉写了一题结果超时了而且没有全部ac</p>
<p>最离谱的是想不起来怎么用JAVA读输入..最后用python写的</p>
<p>下面是回忆</p>
<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><p>网络+cpp基础知识+数据库+集成测试工具+UML+…想不起来了</p>
<p>比如http属于第几层</p>
<p>数据库的xx操作体现四大特点的哪个</p>
<p>CPP主要是虚函数 类初始化顺序等</p>
<h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><ol>
<li>假设有一个矩阵，矩阵由 0 和 1 数字组成。其中1代表这个节点可达，0代表这个节点不可达，从左上角第一个节点出发到右下角最后一个节点，只能上下左右移动，初始节点数为 1，移动一步节点数加 1，问最少需要经过多少节点可以达到。请实现计算最短路径的函数。如果不可达返回0。</li>
</ol>
<p>输入</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在便利店中顾客的结账时间是很重要的指标。结账时间由排队等待时间，和顾客操作付款时间两部分组成。程序输入为顾客列表 customers，每一位顾客 customer[i] 包含两个数值 arriveTime, payDuration。 请计算所有顾客的总结账时间。</p>
</li>
</ol>
<ul>
<li>arriveTime 表示顾客挑选完商品去结账的时刻；</li>
<li>payDuration 表示顾客操作付款的时间。</li>
</ul>
<p>输入</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span> </span><br><span class="line"><span class="number">2</span>,<span class="number">5</span> </span><br><span class="line"><span class="number">4</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>给定一组词组，每个词组包含id和字符串的映射，现输入另一组词组，要求找出新的词组与老的词组的diff关系，diff要求如下：<br>1、id相同且字符串相同的两个词组视为相同<br>2、id相同，且字符串不同的输出modify+id<br>3、新的词组id在老的词组id中不存在的，视为新增，输出add+id<br>4、老的词组id在新的词组id中不存在的，视为删除，输出delete+id</p>
</li>
</ol>
]]></content>
      <categories>
        <category>求职</category>
      </categories>
      <tags>
        <tag>春招</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里1面</title>
    <url>/2021/03/28/%E9%98%BF%E9%87%8C1%E9%9D%A2/</url>
    <content><![CDATA[<p>2021-3-28</p>
<p>阿里一面 面试官一直试图明白我到底会什么</p>
<p>面试官：”我听说你用过xxx，那你知道xxx嘛？”</p>
<p>我：“不知道”</p>
<h1 id="问题汇总："><a href="#问题汇总：" class="headerlink" title="问题汇总："></a>问题汇总：</h1><h2 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1 自我介绍"></a>1 自我介绍</h2><p>介绍学过什么课，做过什么项目</p>
<h2 id="2-简历中写到NJU酒店管理系统（开始白给）"><a href="#2-简历中写到NJU酒店管理系统（开始白给）" class="headerlink" title="2 简历中写到NJU酒店管理系统（开始白给）"></a>2 简历中写到NJU酒店管理系统（开始白给）</h2><h3 id="2-1-数据库"><a href="#2-1-数据库" class="headerlink" title="2.1 数据库"></a>2.1 数据库</h3><ol>
<li>介绍一下你们的数据库设计</li>
<li>这个数据库使用了第几范式</li>
<li>是否使用了<strong>索引</strong> （踩大坑上了 索引除了知道B+ tree其余一概不知）<ol>
<li>索引的底层实现结构</li>
<li>索引设计（查看自己用户信息，查看一年订单，查看酒店优惠）</li>
<li>（A, B, C）A，B联合索引，select B是否可以</li>
</ol>
</li>
<li>事务的四个特点解释<ol>
<li>原子性</li>
<li>一致性</li>
<li>隔离性<ol>
<li>四个隔离级别（完全没听过）</li>
</ol>
</li>
<li>持久性</li>
</ol>
</li>
</ol>
<h3 id="2-2-Springboot"><a href="#2-2-Springboot" class="headerlink" title="2.2 Springboot"></a>2.2 Springboot</h3><ol>
<li>Spring的作用</li>
<li>介绍一下IOC</li>
<li>注入的方式有哪些<ol>
<li>@autowire 一个接口两个Bean 会出现什么问题如何解决</li>
</ol>
</li>
<li>Bean的生命周期<ol>
<li>你读过源码吗？没有。那这个问题不问了（本来还能扯一扯）</li>
</ol>
</li>
<li>怎么理解AOP</li>
<li>AOP 的实现方法有哪些</li>
<li>比如一个类A有三个方法，M1，M2，M3 对M3切面，M1调用M3，切面是否生效</li>
</ol>
<h2 id="3-JAVA基础"><a href="#3-JAVA基础" class="headerlink" title="3 JAVA基础"></a>3 JAVA基础</h2><p>面试官问我对java了解到什么程度，我说只能了解一点点，走成华大道..</p>
<h3 id="3-1-集合"><a href="#3-1-集合" class="headerlink" title="3.1 集合"></a>3.1 集合</h3><ol>
<li>你知道java集合有哪些数据结构</li>
<li>讲一讲hashmap（他问我了解哪个，我说我只看过这个）</li>
<li>hashmap和hashtable的区别</li>
<li>concurrenthashmap和hashmap的区别</li>
<li>为什么是线程安全的（hashtable，currenthashmap？）</li>
</ol>
<h3 id="3-2-线程"><a href="#3-2-线程" class="headerlink" title="3.2 线程"></a>3.2 线程</h3><ol>
<li><p>使用线程的三种方式</p>
</li>
<li><p>runnale和callable的区别</p>
</li>
<li><p>线程池</p>
<p>这里我说我对线程的了解就到这了，面试官就不问了</p>
</li>
</ol>
<h3 id="3-3-JVM"><a href="#3-3-JVM" class="headerlink" title="3.3  JVM"></a>3.3  JVM</h3><p>让我自己说对JVM的了解</p>
<p>我就拿出了我早晨恶补一小时的JVM体系结构图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210328111654442.png" alt="image-20210328111654442"></p>
<ol>
<li>String a=“a” String b=new String（“a”） a==b?</li>
</ol>
<p>这里我说不等，因为一个在常量池一个在堆中，他问我怎么样才能相等，我说.equals()</p>
<p><img src="https://cdn.jsdelivr.net/gh/Coolingsky167/Figure/cover/image-20210328112012176.png" alt="image-20210328112012176"></p>
<ol start="2">
<li>s1=”a” s2=”b” s3=”a”+”b” 存储？</li>
</ol>
<p>我这里说都在常量池..我现在有点忘了他问的是a+b还是s1+s2</p>
<p>后者在堆中</p>
<ol start="3">
<li><p><strong>类加载器</strong></p>
<ol>
<li>类加载方式</li>
</ol>
<p>我balabal胡扯一堆，用上了早晨刚看到的名词“双亲委托模式”</p>
<ol start="2">
<li>那双亲委托的作用是什么？</li>
</ol>
<p>卒。</p>
<ol start="3">
<li>举个例子，比如不同目录下的同名类，用了双亲委托和不用有什么区别？</li>
</ol>
<p>卒。</p>
</li>
</ol>
<h2 id="4-你有什么想问我的"><a href="#4-你有什么想问我的" class="headerlink" title="4 你有什么想问我的"></a>4 你有什么想问我的</h2><p>开始胡扯，总结一下是希望我掌握：</p>
<ol>
<li>数据库是基础，我一直强调索引，你不会balaba，因为这是和实战相关的</li>
<li>JAVA基础、框架、缓存（Redis）</li>
<li>分布式框架是加分项，对实习生没有什么要求</li>
<li>Spring框架多了解原理</li>
</ol>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>估计阿里面试之旅已经结束，毕竟准备时间顶多四五个小时</p>
<p>忙着英语考试但是英语也准备的不好…</p>
<p>面试官整体很nice 也没有狂怼我 只有我孤独的尴尬</p>
<p>早点考完两个语言考试。</p>
<p>下次还来。</p>
<p>///</p>
<p>12点的时候查看已经被挂掉辣</p>
<p>泪目</p>
]]></content>
      <categories>
        <category>求职</category>
      </categories>
      <tags>
        <tag>春招</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里笔试</title>
    <url>/2021/03/24/%E9%98%BF%E9%87%8C%E7%AC%94%E8%AF%95/</url>
    <content><![CDATA[<p>2021-3-24</p>
<p>阿里笔试两道题，这次整体偏简单，但是好像有点离谱</p>
<p>我还是0分</p>
<h3 id="第一道题："><a href="#第一道题：" class="headerlink" title="第一道题："></a>第一道题：</h3><p> 牛牛喜欢跳格子，希望我帮他计算出跳n个格子的最大值，  </p>
<p> 题意：  </p>
<p>有n个格子，跳1格只能拿跳到的那一格的一半分（如果不能整除则向上取整），跳2格可以拿第2格的全部分，问跳n格最多能拿多少分。  </p>
<h3 id="第二道题："><a href="#第二道题：" class="headerlink" title="第二道题："></a>第二道题：</h3><p>   给你二叉树的权值，前序遍历以及中序遍历的值，还原出二叉树，且找出子树中对称的且权重最大的子树，输出其权值和。</p>
<p>第二题直接没看</p>
<p>第一题感觉做出来了ac全是0</p>
<p>跑到牛客网上看了，和大佬全ac的区别好像是题目意思丢掉的分数向上取整。</p>
<p>人气晕了。</p>
]]></content>
      <categories>
        <category>求职</category>
      </categories>
      <tags>
        <tag>春招</tag>
        <tag>实习</tag>
      </tags>
  </entry>
</search>
